{"thirdPartyDependencies":[],"code":"/** Handle the user message.\n * @param {string} payload the message sent by user\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\n// APIs\njikanBaseApi = `https://api.jikan.moe/v4`;\n\n// CONSTANTS\nconst defaultState = {\n  currentReq: null, // current user's request\n  isTrendingAnimeRequested: false, //if trending anime is requested\n  isTrendingMangaRequested: false, //if trending anime is requested\n  isGenreRequested: false, //if genre is asked\n  genreReq: null, //store the preferred genre\n};\n\nconst genreList = [\n  \"anything\",\n  \"Comedy\",\n  \"Romance\",\n  \"Fantasy\",\n  \"Action\",\n  \"Drama\",\n  \"School Life\",\n  \"Adventure\",\n  \"Slice of Life\",\n  \"Yaoi\",\n  \"Science Fiction\",\n  \"Shoujo Ai\",\n  \"Ecchi\",\n  \"Sports\",\n  \"Historical\",\n  \"Music\",\n  \"Magic\",\n  \"Mystery\",\n  \"Supernatural\",\n  \"Harem\",\n  \"Japan\",\n  \"Psychological\",\n  \"Thriller\",\n  \"Shounen\",\n  \"Earth\",\n  \"Horror\",\n  \"Kids\",\n  \"Seinen\",\n  \"Present\",\n  \"Shounen Ai\",\n  \"Martial Arts\",\n  \"Asia\",\n  \"Shoujo\",\n  \"Isekai\",\n  \"Mecha\",\n  \"Demon\",\n  \"Super Power\",\n  \"Fantasy World\",\n  \"Violence\",\n  \"Military\",\n  \"Josei\",\n];\n// anything that prompts that the bot is going the right direction\n// can just declare as positive.includes(response)\nconst positive = [\"ok\", \"sure\", \"correct\", \"fine\", \"yes\"];\n\nconst reqList = `\n- Providing trending anime or manga based on genre, rating etc. \n- Searching information about an anime/manga\n- Getting a random anime quote\n- Identifying an anime from an image\n`;\n\nconst jikanGenresMapping = {\n  genres: [\n    { mal_id: 1, genre: \"Action\" },\n    { mal_id: 2, genre: \"Adventure\" },\n    { mal_id: 5, genre: \"Avant Garde\" },\n    { mal_id: 46, genre: \"Award Winning\" },\n    { mal_id: 28, genre: \"Boys Love\" },\n    { mal_id: 4, genre: \"Comedy\" },\n    { mal_id: 8, genre: \"Drama\" },\n    { mal_id: 10, genre: \"Fantasy\" },\n    { mal_id: 26, genre: \"Girls Love\" },\n    { mal_id: 47, genre: \"Gourmet\" },\n    { mal_id: 14, genre: \"Horror\" },\n    { mal_id: 7, genre: \"Mystery\" },\n    { mal_id: 22, genre: \"Romance\" },\n    { mal_id: 24, genre: \"Sci-Fi\" },\n    { mal_id: 36, genre: \"Slice of Life\" },\n    { mal_id: 30, genre: \"Sports\" },\n    { mal_id: 37, genre: \"Supernatural\" },\n    { mal_id: 41, genre: \"Suspense\" },\n    { mal_id: 9, genre: \"Ecchi\" },\n    { mal_id: 49, genre: \"Erotica\" },\n    { mal_id: 12, genre: \"Hentai\" },\n    { mal_id: 50, genre: \"Adult Cast\" },\n    { mal_id: 51, genre: \"Anthropomorphic\" },\n    { mal_id: 52, genre: \"CGDCT\" },\n    { mal_id: 53, genre: \"Childcare\" },\n    { mal_id: 54, genre: \"Combat Sports\" },\n    { mal_id: 81, genre: \"Crossdressing\" },\n    { mal_id: 55, genre: \"Delinquents\" },\n    { mal_id: 39, genre: \"Detective\" },\n    { mal_id: 56, genre: \"Educational\" },\n    { mal_id: 57, genre: \"Gag Humor\" },\n    { mal_id: 58, genre: \"Gore\" },\n    { mal_id: 35, genre: \"Harem\" },\n    { mal_id: 59, genre: \"High Stakes Game\" },\n    { mal_id: 13, genre: \"Historical\" },\n    { mal_id: 60, genre: \"Idols (Female)\" },\n    { mal_id: 61, genre: \"Idols (Male)\" },\n    { mal_id: 62, genre: \"Isekai\" },\n    { mal_id: 63, genre: \"Iyashikei\" },\n    { mal_id: 64, genre: \"Love Polygon\" },\n    { mal_id: 65, genre: \"Magical Sex Shift\" },\n    { mal_id: 66, genre: \"Mahou Shoujo\" },\n    { mal_id: 17, genre: \"Martial Arts\" },\n    { mal_id: 18, genre: \"Mecha\" },\n    { mal_id: 67, genre: \"Medical\" },\n    { mal_id: 38, genre: \"Military\" },\n    { mal_id: 19, genre: \"Music\" },\n    { mal_id: 6, genre: \"Mythology\" },\n    { mal_id: 68, genre: \"Organized Crime\" },\n    { mal_id: 69, genre: \"Otaku Culture\" },\n    { mal_id: 20, genre: \"Parody\" },\n    { mal_id: 70, genre: \"Performing Arts\" },\n    { mal_id: 71, genre: \"Pets\" },\n    { mal_id: 40, genre: \"Psychological\" },\n    { mal_id: 3, genre: \"Racing\" },\n    { mal_id: 72, genre: \"Reincarnation\" },\n    { mal_id: 73, genre: \"Reverse Harem\" },\n    { mal_id: 74, genre: \"Romantic Subtext\" },\n    { mal_id: 21, genre: \"Samurai\" },\n    { mal_id: 23, genre: \"School\" },\n    { mal_id: 75, genre: \"Showbiz\" },\n    { mal_id: 29, genre: \"Space\" },\n    { mal_id: 11, genre: \"Strategy Game\" },\n    { mal_id: 31, genre: \"Super Power\" },\n    { mal_id: 76, genre: \"Survival\" },\n    { mal_id: 77, genre: \"Team Sports\" },\n    { mal_id: 78, genre: \"Time Travel\" },\n    { mal_id: 32, genre: \"Vampire\" },\n    { mal_id: 79, genre: \"Video Game\" },\n    { mal_id: 80, genre: \"Visual Arts\" },\n    { mal_id: 48, genre: \"Workplace\" },\n    { mal_id: 43, genre: \"Josei\" },\n    { mal_id: 15, genre: \"Kids\" },\n    { mal_id: 42, genre: \"Seinen\" },\n    { mal_id: 25, genre: \"Shoujo\" },\n    { mal_id: 27, genre: \"Shounen\" },\n  ],\n};\n\nconst jikanGenres = [\n  \"action\",\n  \"adventure\",\n  \"avant garde\",\n  \"award winning\",\n  \"boys love\",\n  \"comedy\",\n  \"drama\",\n  \"fantasy\",\n  \"girls love\",\n  \"gourmet\",\n  \"horror\",\n  \"mystery\",\n  \"romance\",\n  \"sci-fi\",\n  \"slice of life\",\n  \"sports\",\n  \"supernatural\",\n  \"suspense\",\n  \"ecchi\",\n  \"erotica\",\n  \"hentai\",\n  \"adult cast\",\n  \"anthropomorphic\",\n  \"cgdct\",\n  \"childcare\",\n  \"combat sports\",\n  \"crossdressing\",\n  \"delinquents\",\n  \"detective\",\n  \"educational\",\n  \"gag humor\",\n  \"gore\",\n  \"harem\",\n  \"high stakes game\",\n  \"historical\",\n  \"idols (female)\",\n  \"idols (male)\",\n  \"isekai\",\n  \"iyashikei\",\n  \"love polygon\",\n  \"magical sex shift\",\n  \"mahou shoujo\",\n  \"martial arts\",\n  \"mecha\",\n  \"medical\",\n  \"military\",\n  \"music\",\n  \"mythology\",\n  \"organized crime\",\n  \"otaku culture\",\n  \"parody\",\n  \"performing arts\",\n  \"pets\",\n  \"psychological\",\n  \"racing\",\n  \"reincarnation\",\n  \"reverse harem\",\n  \"romantic subtext\",\n  \"samurai\",\n  \"school\",\n  \"showbiz\",\n  \"space\",\n  \"strategy game\",\n  \"super power\",\n  \"survival\",\n  \"team sports\",\n  \"time travel\",\n  \"vampire\",\n  \"video game\",\n  \"visual arts\",\n  \"workplace\",\n  \"josei\",\n  \"kids\",\n  \"seinen\",\n  \"shoujo\",\n  \"shounen\",\n];\n\nconst jikanTypeList =\n  '[\"tv\", \"movie\" ,\"ova\" ,\"special\", \"ona\", \"music\",\"cm\", \"pv\",\" tv_special\", \"manga\", \"novel\", \"lightnovel\", \"oneshot\", \"doujin\", \"manhwa\", \"manhua\"]';\n\nasync function run(payload, state, tools) {\n  // console.log(\"In Run: \", state)\n  try {\n    if (!state.currentReq) {\n      res = await tools.understandUserReq({ userMessage: payload });\n      // console.log(res);\n      state.currentReq = JSON.parse(res);\n    }\n\n    console.log(\"In run, request detected: \", state.currentReq);\n\n    switch (state.currentReq.req_num) {\n      case 1:\n        handleTrending(payload, state, tools);\n        break;\n      case 2:\n        handleSearch(payload, state, tools);\n        break;\n      case 3:\n        handleGetQuote(payload, state, tools);\n        break;\n      case 4:\n        handleIdentifyImage(payload, state, tools);\n        break;\n      default:\n        handleError(state, tools);\n    }\n  } catch (e) {\n    console.log(e);\n    handleError(state, tools);\n  }\n}\n\n/** Startup.\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\nasync function startup(state, tools) {\n  tools.reply(`Hello! Welcome to the Anime Query Bot. Here are some\n  information I can provide you!\n  ${reqList}`);\n\n  // Setting state\n  resetState(state);\n}\n\n/** Unit test.\n * @param {Test} test define a test case\n * @param {Tool} tools available tools to perform a task\n */\nfunction unitTest(test, tools) {\n  test(\"Test 1\", 1, async (expect) => {\n    expect(true).toBeTrue();\n  });\n}\n\nasync function handleError(state, tools) {\n  tools.reply(`I'm sorry, I do not understand your request. Here is a list of topics I can assist you in:\n  ${reqList}`);\n\n  resetState(state);\n}\n\nfunction resetState(state) {\n  for (let key in defaultState) {\n    state[key] = defaultState[key];\n  }\n  console.log(\"Reset done.\", state);\n}\n\n// HANDLE TRENDING\nasync function handleTrending(payload, state, tools) {\n  console.log(\"In handletrending; \", state);\n  var {\n    isTrendingAnimeRequested,\n    isTrendingMangaRequested,\n    isGenreRequested,\n    genreReq,\n  } = state;\n\n  // get user's response, convert to lower case\n  var response = payload.toLowerCase().trim();\n\n  if (!isTrendingAnimeRequested && !isTrendingMangaRequested) {\n    var request = await tools.getUserWants(\n      { userMessage: response },\n      { memory: tools.getChatHistory(10) }\n    );\n    // if satisfy one of the functions\n    // this is done so that the chat bot wont reply \"trending anime\" / \"trending manga\"\n    if (request === \"trending anime\") {\n      tools.reply(\n        `We detected that you want to get ${request}. Is that correct?`\n      );\n      state.isTrendingAnimeRequested = true;\n    } else if (request === \"trending manga\") {\n      tools.reply(\n        `We detected that you want to get ${request}. Is that correct?`\n      );\n      state.isTrendingMangaRequested = true;\n    } else {\n      tools.reply(request);\n    }\n  }\n\n  // ask for genre\n  if (\n    (isTrendingAnimeRequested || isTrendingMangaRequested) &&\n    !isGenreRequested\n  ) {\n    const genre = await tools.getGenre(\n      { userMessage: response },\n      { memory: tools.getChatHistory(5) }\n    );\n    if (genreList.includes(genre) || positive.includes(response)) {\n      state.genreReq = genre;\n      // if got preference\n      if (genreReq === `` || genreReq === null) {\n        tools.reply(genre);\n      } else if (state.genreReq !== `anything`) {\n        tools.reply(\n          `We detected that the genre you want is ${state.genreReq}. Is that correct?`\n        );\n        state.isGenreRequested = true;\n      } else {\n        tools.reply(\n          `We will provide trending anime/manga for all genres. Is that ok?`\n        );\n        state.isGenreRequested = true;\n      }\n    } else {\n      tools.reply(\"Let me know what more you want to query!\");\n      resetState(state);\n    }\n  }\n\n  //////////////////////////////////////////////get trending anime/////////////////////////////////////////////////\n  if (isTrendingAnimeRequested && isGenreRequested) {\n    if (positive.includes(response)) {\n      // get trending anime from api\n      getTrendingAnime = await getTrending(\n        genreReq,\n        isTrendingAnimeRequested,\n        isTrendingMangaRequested\n      );\n\n      // if no error detected, generate top 5 anime\n      if (!getTrendingAnime.includes(\"Error\")) {\n        // convert to Javascript object\n        const trendingAnime = JSON.parse(getTrendingAnime);\n        tools.reply(\n          `Here are the top 5 anime that are trending for ${genreReq} right now!`\n        );\n        for (let i = 0; i < 5; i++) {\n          const animeInfo = trendingAnime[\"data\"][i][\"attributes\"];\n          top5Anime = `Title: ${animeInfo[\"titles\"][\"en_jp\"]} \n            Sypnosis: ${animeInfo[\"synopsis\"]} \\n\n            Average Rating: ${animeInfo[\"averageRating\"]} \\n\n            Status: ${animeInfo[\"status\"]} \\n\n            No. of Episodes: ${animeInfo[\"episodeCount\"]}`;\n          tools.reply(await tools.formatMessage({ content: top5Anime }));\n        }\n      }\n      // if error detected, return error message and try again\n      else {\n        tools.reply(getTrendingAnime);\n      }\n    }\n    // done generating trending anime\n    tools.reply(\"Let me know what more you want to query!\");\n    resetState(state);\n  }\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  //////////////////////////////////////////////get trending manga/////////////////////////////////////////////////\n  if (isTrendingMangaRequested && isGenreRequested) {\n    if (positive.includes(response)) {\n      // get trending anime from api\n      getTrendingManga = await getTrending(\n        genreReq,\n        isTrendingAnimeRequested,\n        isTrendingMangaRequested\n      );\n      // if no error detected, generate top 5 anime\n      if (!getTrendingManga.includes(\"Error\")) {\n        // convert to Javascript object\n        const trendingManga = JSON.parse(getTrendingManga);\n        tools.reply(\n          `Here are the top 5 manga that are trending for ${genreReq} right now!`\n        );\n        for (let i = 0; i < 5; i++) {\n          const mangaInfo = trendingManga[\"data\"][i][\"attributes\"];\n          top5Manga = `Title: ${mangaInfo[\"canonicalTitle\"]} \n            Sypnosis: ${mangaInfo[\"synopsis\"]} \\n\n            Average Rating: ${mangaInfo[\"averageRating\"]} \\n\n            Status: ${mangaInfo[\"status\"]} \\n\n            No. of Volumes: ${mangaInfo[\"volumeCount\"]}\n            No. of Chapter: ${mangaInfo[\"chapterCount\"]}`;\n          tools.reply(await tools.formatMessage({ content: top5Manga }));\n        }\n      }\n      // if error detected, return error message and try again\n      else {\n        tools.reply(getTrendingManga);\n      }\n    }\n    // done generating trending anime\n    tools.reply(\"Let me know what more you want to query!\");\n    resetState(state);\n  }\n  async function getTrending(\n    genreChoice,\n    isTrendingAnimeRequested,\n    isTrendingMangaRequested\n  ) {\n    if (isTrendingAnimeRequested) {\n      var apiURL = `https://kitsu.io/api/edge/anime?`;\n    } else if (isTrendingMangaRequested) {\n      var apiURL = `https://kitsu.io/api/edge/manga?`;\n    }\n    if (genreChoice !== \"null\") {\n      apiURL = apiURL + `filter[categories]=${genreChoice}`;\n    }\n    try {\n      const trending = await fetch(apiURL, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/vnd.api+json\",\n        },\n      });\n      const trendingManga = await trending.text();\n      return trendingManga;\n    } catch (error) {\n      const errorMsg = `Error fetching trending manga: ${error}`;\n      console.error(errorMsg);\n      return errorMsg;\n    }\n  }\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n}\n\n// HANDLE SEARCH\nconst searchResponseType = {\n  NAME: \"NAME\",\n  GENRE: \"GENRE\",\n  STATUS: \"STATUS\",\n  GUESS: \"GUESS\",\n};\n\nconst statusType = {\n  AIRING: \"airing\",\n  COMPLETE: \"complete\",\n  UPCOMING: \"upcoming\",\n};\n\nasync function handleSearch(payload, state, tools) {\n  /*\n  This function extracts out the details from the user's message and tries to find related information.\n  If an anime is specified -> return that info\n  If an anime is 'described' and a guess is made -> return that info + others?\n  Else if genres -> return a list of animes suiting the genre\n  */\n  // Extract detected of Genres\n  const { genres } = JSON.parse(\n    await tools.genreExtracter({\n      userMessage: payload,\n    })\n  );\n\n  // console.log(\"handleSearch, genres: \", genres);\n  let validGenres = [];\n  let invalidGenres = [];\n  // keep valid genres\n  for (let g of genres) {\n    if (jikanGenres.includes(g.toLowerCase()))\n      validGenres.push(g.toLowerCase());\n    else invalidGenres.push(g);\n  }\n\n  // console.log(\"handleSearch, validGenres: \", validGenres);\n\n  // Match Genre Ids\n  let genre_ids = matchGenreWithMalIDs(validGenres);\n\n  // console.log(\"In handleSearch, genre_ids: \", genre_ids);\n\n  // Get status\n  const status_res = JSON.parse(\n    await tools.statusExtractor({ userMessage: payload })\n  );\n  console.log(\"handleSearch, status: \", status_res);\n\n  // Get details\n  const res_ai = JSON.parse(\n    await tools.searchHelper(\n      { userMessage: payload },\n      {\n        memory: tools.getChatHistory(0),\n        externalTools: {\n          genreList: () => {\n            return JSON.stringify(jikanGenresMapping);\n          },\n          getTypeList: () => {\n            return jikanTypeList;\n          },\n        },\n      }\n    )\n  );\n  console.log(\"handleSearch: \", res_ai);\n  // Check res_ai\n  if (!res_ai.hasOwnProperty(\"target\")) {\n    tools.reply(\n      \"I'm sorry. I did not quite understand your request. Perhaps you can try phrasing it differently?\"\n    );\n  } else {\n    const { is_guess, name_detected, target, name, type } = res_ai;\n    // Returns ?queries\n    try {\n      let { query, switch_exp } = formQueryParams(\n        invalidGenres,\n        res_ai,\n        status_res.status,\n        genre_ids,\n        tools\n      );\n      let api = `${jikanBaseApi}/${target}?${query}`;\n      console.log(\"handleSearch, API: \", api);\n      const res = await fetch(api);\n      const res_json = await res.json();\n      const data = res_json.data;\n      console.log(\"handleSearch, data: \", data);\n      if (data.length === 0) {\n        tools.reply(\n          `I'm sorry but I cannot find any information regarding what you are looking for...`\n        );\n      } else {\n        switch (switch_exp) {\n          case searchResponseType.STATUS: // Detected status related query\n            tools.reply(\n              `I've found some ${status_res.status} ${target} that may interest you:`\n            );\n            cur_idx = 0;\n            while (cur_idx < data.length && cur_idx < 4) {\n              await formatInfoResponse(data[cur_idx], tools);\n              cur_idx++;\n            }\n            break;\n          case searchResponseType.NAME: // Name detected\n            tools.reply(\n              `Here is more information about the ${target} _${name}_`\n            );\n            await formatInfoResponse(data[0], tools);\n            break;\n          case searchResponseType.GUESS: // Name guessed\n            tools.reply(`You may be thinking of the ${target} _${name}_`);\n            // Get first\n            await formatInfoResponse(data[0], tools);\n            // Other\n            tools.reply(`Other relevant ${target} may be:`);\n            // Loop\n            cur_idx = 1;\n            while (cur_idx < data.length && cur_idx < 4) {\n              await formatInfoResponse(data[cur_idx], tools);\n              cur_idx++;\n            }\n            break;\n          case searchResponseType.GENRE: // No Name detected -> Use Genre\n            tools.reply(\n              `Based on your description, here are some ${target} that may be of interest:`\n            );\n            cur_idx = 0;\n            while (cur_idx < data.length && cur_idx < 4) {\n              await formatInfoResponse(data[cur_idx], tools);\n              cur_idx++;\n            }\n            break;\n          default:\n            tools.reply(\n              `I'm afraid I do not understand your request. Try specifying a genre or describing the ${target}.`\n            );\n        }\n      }\n    } catch (e) {\n      console.log(\"Error in handleSearch: \", e);\n      tools.reply(\n        \"Oops... It appears something has gone wrong. Please try again.\"\n      );\n    }\n  }\n  resetState(state, tools);\n}\n\nfunction matchGenreWithMalIDs(genres) {\n  ids = [];\n  jikanGenresMapping.genres.forEach((g) => {\n    if (genres.includes(g.genre.toLowerCase())) {\n      ids.push(g.mal_id);\n    }\n  });\n  return ids;\n}\n\nfunction formQueryParams(\n  invalidGenres,\n  { name_detected, is_guess, target, name, type },\n  status,\n  genre_ids,\n  tools\n) {\n  let query = `type=${type}`;\n  let switch_exp = 0;\n\n  // Name detected\n  if (name_detected && !is_guess) {\n    query = `${query}&q=${name}`;\n    switch_exp = searchResponseType.NAME;\n  } else if (is_guess) {\n    query = `${query}&q=${name}`;\n    switch_exp = searchResponseType.GUESS;\n  }\n  // No Name detected\n  else if (genre_ids.length !== 0) {\n    genres_string = genre_ids.join(\",\");\n    invalidGenresString = invalidGenres.join(\",\");\n    query =\n      invalidGenres.length === 0\n        ? `${query}&genres=${genres_string}`\n        : `${query}&q=${invalidGenresString}&genres=${genres_string}`;\n    switch_exp = searchResponseType.GENRE;\n  }\n  if (status === statusType.UPCOMING) {\n    query += `&status=${status}`;\n    switch_exp = searchResponseType.STATUS;\n  }\n  return { query, switch_exp };\n}\n\nasync function formatInfoResponse(content, tools) {\n  let formatted_info = await tools.formatMessage({\n    content: JSON.stringify(content),\n  });\n  // console.log(formatted_info);\n  tools.reply(formatted_info);\n}\n\n// HANDLE QUOTE\nasync function handleGetQuote(payload, state, tools) {\n  console.log(\"In handleGetQuote; \", state);\n  tools.reply();\n  resetState(state, tools);\n}\n\n// HANDLE IMAGE ID\nasync function handleIdentifyImage(payload, state, tools) {\n  resetState(state, tools);\n  return;\n}\n","llmFunctions":[{"functionName":"getUserWants","description":"Get what the user wants.","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are a bot about anime and manga.\nYour job is to ask what does the user wants to query.\nIf the user wants trending anime, return only the string \"trending anime\".\nIf the user wants trending manga, return only the string \"trending manga\".\nDO NOT GENERATE THE TRENDING ANIME AND MANGA FOR THEM.\nIf its unclear, ask the user."},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.5,"topP":0.4,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"formatMessage","description":"Formatting Anime and Manga information in an organized markdown format","arguments":["content"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"RULES: \nYou need to keep your message up to 4096 Tokens. Therefore, you must try your best in summarizing the information.\n\nYou are an expert in organizing information.\nYou are to read the content that is passed to you and return it to markdown format\n\nSome content passed to you may contain an image. This may be found in a property \"images\". You MUST refer to this and display the image if possible.\n\nSome content passed to you may contain a trailer link. Add this link to the bottom of the displayed information.\n\nMake sure that the information are displayed in the format below. Display it in a relevant markdown format:\n# Title\n{IMAGE if it is given in the {{content}}}\n## Synopsis\nAll other relevant information\nTrailer\n\n\nExample:\n# Witch Hunter Robin\\n\n{IMAGE if it is given in the {{content}}}\n## Synopsis\\n\nIt is the dark century and the people are suffering under the rule of the devil, Vandel, who is able to manipulate monsters. The Vandel Busters are a group of people who hunt these devils, and among them, the Zenon Squad is known to be the strongest busters on the continent. A young boy, Beet, dreams of joining the Zenon Squad. However, one day, as a result of Beet's fault, the Zenon squad was defeated by the devil, Beltose. The five dying busters sacrificed their life power into their five weapons, Saiga. After giving their weapons to Beet, they passed away. Years have passed since then and the young Vandel Buster, Beet, begins his adventure to carry out the Zenon Squad's will to put an end to the dark century.\\n\n**Average Rating**: 69.43/100\\n\n**Status**: finished\\n\n**No. of Episodes**: 52\n## Trailer"},{"role":"user","content":"{{content}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0,"topP":0,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"getGenre","description":"To get what genre the use wants","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are to detect what genre the user wants for anime or manga.\nYou do so by FIRST asking what genre the user wants.\nDO NOT ASSUME THAT THE USER DONT MIND ANYTHING. ASK FIRST.\nIf it is unclear or if the user did not mention, CONTINUE asking for the genre preferred.\nIf the user does not have any preference or says anything, return only this string \"anything\".\nElse return only one genre that fit what the user wants in the genre list.\nDO NOT RECOMMEND ANY MANGA OR ANIME TO THE USERS. YOUR JOB IS ONLY TO RETURN THE DESIRED GENRE THE USER WANTS.\ngenre list= [\n      \"Comedy\",\n      \"Romance\",\n      \"Fantasy\",\n      \"Action\",\n      \"Drama\",\n      \"School Life\",\n      \"Adventure\",\n      \"Slice of Life\",\n      \"Yaoi\",\n      \"Science Fiction\",\n      \"Shoujo Ai\",\n      \"Ecchi\",\n      \"Sports\",\n      \"Historical\",\n      \"Music\",\n      \"Magic\",\n      \"Mystery\",\n      \"Supernatural\",\n      \"Harem\",\n      \"Japan\",\n      \"Psychological\",\n      \"Thriller\",\n      \"Shounen\",\n      \"Earth\",\n      \"Horror\",\n      \"Kids\",\n      \"Seinen\",\n      \"Present\",\n      \"Shounen Ai\",\n      \"Martial Arts\",\n      \"Asia\",\n      \"Shoujo\",\n      \"Isekai\",\n      \"Mecha\",\n      \"Demon\",\n      \"Super Power\",\n      \"Fantasy World\",\n      \"Violence\",\n      \"Military\",\n      \"Josei\"\n  ]\n\nIf the user responds \"yes\", ask what genre the user wants."},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.5,"topP":0.4,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"understandUserReq","description":"Discern what the user is requesting based on the available functions of the bot","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"user","content":"{{userMessage}}"},{"role":"system","content":"You are a helpful assistant and an expert in understanding user requests.\nYou need to read the user's request very carefully, and think through what it is asking.\n\nYou need to match the request based on the following mapping:\n1)\nname: get_trending\nDescription: User is requesting for the latest trending anime/manage. The request may contain keywords such as \"trending\". \nexample: \"What is the latest trending {anime/manga}?\"\n\n2)\nname: search\nDescription: User is asking information related to an anime/manga. The request may be asking general information about anime, or even ask about anime that are going to be released, upcoming, have completed, or is currently airing. The request may contain keywords such as \"search\".\nexample: \"What is {anime_name} about?\"; \"Tell me more about {anime_name}\"; Or the user can simply type the name of the topic as such \"{anime_name}\"\n\n3)\nname: get_quote\nDescription:  User is requesting for an anime quote\nexample: \"Give me a random anime quote\"\n\n4)\nname: image_identify\nDescription: user is requesting to identify an anime/manga from an image source\nexample: \"What is this anime from the following image: {image_url}?\"\n\nReturn your answer in a JSON format:\n{\n    \"req_num\": number// number of the request based on the mapping\n    \"req_name\": string // name of the request. wrap it in \"\"\n    \"thought\": string // your thought process behind why you chose this\n}\n\nIf you are unable to identify the request. Return:\n\n{\n    \"req_num\": 999\n    \"req_name\": \"error\"// name of the request\n    \"thought\": string // your thought process behind why this is so\n}\n"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.1,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"searchHelper","description":"Helper to identify user's request regarding anime/manga","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"user","content":"Message: {{userMessage}}"},{"role":"system","content":"You are a helpful assistant and an expert on all manga and anime.\n\nYour job is to read the user's request carefully and try to understand the anime or manga details from the request.\n\nYou also need to identify any other relevant details that the user is requesting. The following is a list of details you should look out for IN THE USER'S REQUEST:\n\n{\nname: name of the anime/manga from the message. If it is not explicitly mentioned, but the user has provided a description of the character, you can guess what anime he/she is referring to\ntype: refers to if it's a TV series, movie etc.\n}\n\nExamples of ways user may ask but not limited to the following:\n\"What is {name of anime/manga} about?\" or simply saying \"{name of anime/manga}\" or the user may even give you a description about the character, in which case, make your best guess as to the anime/manga.\n\nRules you NEED to follow:\n- For any property with [required], you must include that property in the response. Else, you can exclude it.\n- \"target\" should only be the following string values [\"anime\", \"manga\"]. It defaults to \"anime\"\n- Sometimes, the user may describe the anime/manga instead. Therefore, you need to make your best guess to the anime/manga name.\n\nYou must extract the details and return them in the following JSON Format:\n{\n\"name_detected\": boolean [required]// your understanding as to if a specific name has been seen in the user's request. false if no specific name was mentioned.\n\"is_guess\": boolean [required] // if you guessed the anime name based on the description provided by the user.\n\"target\": string [required] // Based on the user's request, is it asking for \"manga\" or \"anime\"? Default to \"anime\"\n\"name\" : string [required] // best guess as to the name the user is referring to\n\"type\": string [required] // based on the request, match it to the values found in the tool getTypeList: If nothing is found and the \"target\" is \"anime\", use, \"tv\"; else, if the \"target\" is \"manga\", use \"manga\".\n}\n\nIf you do not understand the user's request ask the user again, politely. However, return the following response:\n{\nerror: true // boolean\n}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.9,"topP":0.3,"frequencyPenalty":0,"presencePenalty":0},"functions":[{"name":"genreList","description":"A mapping of the genres and their respective mal_id. Use this to find the right id for the genre that the user is requesting","parameters":"{\n  \"type\": \"object\",\n  \"properties\": {}\n}"},{"name":"getTypeList","description":"A list of valid string types. Use to fill in the \"type\" property","parameters":"{\n  \"type\": \"object\",\n  \"properties\": {}\n}"}]},{"functionName":"genreExtracter","description":"Extract out the valid genre from the user's request","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"user","content":"{{userMessage}}"},{"role":"system","content":"You are a helpful assistant and an expert in identifying valid genres. You should only extract the genre from the user's message. Do not guess the genre.\n\nYou should return your answer in the following JSON Format:\n{\ngenres: list of strings // all valid genres\n}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.7,"topP":0.4,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"statusExtractor","description":"Extracts a status from the user's message.","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"user","content":"{{userMessage}}"},{"role":"system","content":"You are a helpful assistant and are extremely good at understanding the meaning of requests.\n\nIMPORTANT RULES YOU NEED TO FOLLOW:\nThe status you return can only take the values [\"upcoming\", \"complete\",  \"airing\", null] \n\nYour ONLY role is to read the user's request carefully, and see if there is any 'status'. \n\nA 'status' refers the current state of a manga or anime. It can take on the values of \"upcoming\", \"complete\", \"airing\" or null if there is no status that you can detect.\n\n\nThink about why you identified the status as such. \n\nExample of user's request: \"What anime is coming soon?\"\nStatus you should return: \"upcoming\"\nReason: The request is asking for anime that are \"coming soon\", this means that they are not yet released and thus, \"upcoming\".\n\nAnother example: \"What is XXX anime about?\"\nStatus you should return: null\nReason: The request is merely asking about XXX anime, you should not include a status in such a scenario\n\nReturn your response in the following JSON format:\n{\n\"status\": string // can be null if no status is detected.  The status you return can only take the values [\"upcoming\", \"complete\",  \"airing\", null] \n\"thought\": string // your thought process as to why you decided this.\n}\n\n\nIf no status is detected, return null.\n\n"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]}]}