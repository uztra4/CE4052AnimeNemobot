{"thirdPartyDependencies":[],"code":"/** Handle the user message.\n * @param {string} payload the message sent by user\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\n// CONSTANTS\nconst defaultState = {\n  \"currentReq\": null, // current user's request\n  \"isTrendingAnimeRequested\":false, //if trending anime is requested\n  \"isTrendingMangaRequested\":false, //if trending anime is requested\n  \"isGenreRequested\":false, //if genre is asked\n  \"genreReq\":null, //store the preferred genre  \n}\n\n\n// define variables\nconst genreList = [\n    \"anything\",\n    \"Comedy\",\n    \"Romance\",\n    \"Fantasy\",\n    \"Action\",\n    \"Drama\",\n    \"School Life\",\n    \"Adventure\",\n    \"Slice of Life\",\n    \"Yaoi\",\n    \"Science Fiction\",\n    \"Shoujo Ai\",\n    \"Ecchi\",\n    \"Sports\",\n    \"Historical\",\n    \"Music\",\n    \"Magic\",\n    \"Mystery\",\n    \"Supernatural\",\n    \"Harem\",\n    \"Japan\",\n    \"Psychological\",\n    \"Thriller\",\n    \"Shounen\",\n    \"Earth\",\n    \"Horror\",\n    \"Kids\",\n    \"Seinen\",\n    \"Present\",\n    \"Shounen Ai\",\n    \"Martial Arts\",\n    \"Asia\",\n    \"Shoujo\",\n    \"Isekai\",\n    \"Mecha\",\n    \"Demon\",\n    \"Super Power\",\n    \"Fantasy World\",\n    \"Violence\",\n    \"Military\",\n    \"Josei\"\n];\n// anything that prompts that the bot is going the right direction\n// can just declare as positive.includes(response)\nconst postive = [\"ok\", \"sure\", \"correct\", \"fine\"];\n\nconst reqList = `\n- Providing trending anime or manga based on genre, rating etc. \n- Searching information about an anime/manga\n- Getting a random anime quote\n- Identifying an anime from an image\n`\n\n\nasync function run(payload, state, tools) {  \n  // console.log(\"In Run: \", state)\n  try{\n    if(!state.currentReq){\n    res = await tools.understandUserReq({userMessage: payload});\n    // console.log(res);\n    state.currentReq = JSON.parse(res);\n  }\n\n  console.log(\"In run, request detected: \", state.currentReq);\n\n  switch (state.currentReq.req_num) {\n    case 1:\n      handleTrending(payload, state, tools);\n      break;\n    case 2:\n      handleSearch(payload, state, tools);\n      break;\n    case 3:\n      handleGetQuote(payload, state, tools);\n      break;\n    case 4:\n      handleIdentifyImage(payload, state, tools);\n      break;\n    default:\n      handleError(state, tools);\n  }    \n  }catch(e){\n    console.log(e);\n    handleError(state, tools);\n  }  \n}\n\n/** Startup.\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\nasync function startup(state, tools) {\n  tools.reply(`Hello! Welcome to the Anime Query Bot. Here are some\n  information I can provide you!\n  ${reqList}`);\n\n  // Setting state\n  resetState(state);  \n}\n\n/** Unit test.\n * @param {Test} test define a test case\n * @param {Tool} tools available tools to perform a task\n */\nfunction unitTest(test, tools) {\n  test(\"Test 1\", 1, async (expect) => {\n    expect(true).toBeTrue();\n  });\n}\n\nasync function handleError(state, tools){\n  tools.reply(`I'm sorry, I do not understand your request. Here is a list of topics I can assist you in:\n  ${reqList}`);\n\n  resetState(state);\n}\n\nfunction resetState(state){\n  for (let key in defaultState) {\n   state[key] = defaultState[key];\n  }\n  console.log(\"Reset done.\", state);\n}\n\n\n// HANDLE TRENDING\nasync function handleTrending(payload, state, tools){\n  console.log(\"In handletrending; \", state);\n  var { isTrendingAnimeRequested, isTrendingMangaRequested, isGenreRequested, genreReq } = state;\n\n  // get user's response, convert to lower case\n  var response = payload.toLowerCase().trim();\n\n  if (!isTrendingAnimeRequested && !isTrendingMangaRequested){\n    var request = await tools.getUserWants({userMessage: response}, {memory: tools.getChatHistory(10)})\n    // if satisfy one of the functions\n    // this is done so that the chat bot wont reply \"trending anime\" / \"trending manga\"\n    if (request === \"trending anime\"){\n      tools.reply(`We detected that you want to get ${request}. Is that correct?`);\n      state.isTrendingAnimeRequested = true;\n    } else if (request === \"trending manga\"){\n      tools.reply(`We detected that you want to get ${request}. Is that correct?`);\n      state.isTrendingMangaRequested = true;\n    } else {\n      tools.reply(request);\n    }\n    \n  }\n\n  // ask for genre\n  if ((isTrendingAnimeRequested || isTrendingMangaRequested) && !isGenreRequested){\n    const genre = await tools.getGenre({userMessage: response}, {memory: tools.getChatHistory(5)})\n    if (genreList.includes(genre)) {\n      state.genreReq = genre;\n      state.isGenreRequested = true;\n      // if got preference\n      if (state.genreReq !== `anything`){\n        tools.reply(`We detected that the genre you want is ${state.genreReq}. Is that correct?`);\n      } else {\n        tools.reply(`We will provide trending anime/manga for all genres. Is that ok?`);\n      }\n    } else if (genreReq === `` || genreReq === null){\n      tools.reply(genre);\n    }\n  }\n\n //////////////////////////////////////////////get trending anime/////////////////////////////////////////////////\n  if (isTrendingAnimeRequested && isGenreRequested) {\n    if (postive.includes(response)){\n      // get trending anime from api\n      getTrendingAnime = await getTrendingAnime(genreReq);\n\n      // if no error detected, generate top 5 anime\n      if (!(getTrendingAnime.includes('Error'))){\n        // convert to Javascript object\n        const trendingAnime = JSON.parse(getTrendingAnime);\n        tools.reply(`Here are the top 5 anime that are trending for ${genreReq} right now!`);\n        for (let i = 0; i < 5; i++) {\n          const animeInfo = trendingAnime['data'][i]['attributes'];\n            top5Anime = `Title: ${animeInfo['titles']['en_jp']} \n            Sypnosis: ${(animeInfo['synopsis'])} \\n\n            Average Rating: ${animeInfo['averageRating']} \\n\n            Status: ${animeInfo['status']} \\n\n            No. of Episodes: ${animeInfo['episodeCount']}`;\n            tools.reply(await tools.formatMessage({content: top5Anime})); \n        }\n        // TRY BUT FAIL: generate all 5 in one message but overload.\n        // tools.reply(await tools.formatMessage({content: top5Anime}));\n      }\n      // if error detected, return error message and try again\n      else {\n        tools.reply(getTrendingAnime)\n      }\n    }\n    // done generating trending anime\n    tools.reply('Let me know what more you want to query!')\n    // state.isTrendingAnimeRequested = false;\n    // state.isGenreRequested = false;\n    // state.genreReq = ``;\n    resetState(state);\n  }\n //////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n //////////////////////////////////////////////get trending manga/////////////////////////////////////////////////\n  if (isTrendingMangaRequested && isGenreRequested) {\n    if (postive.includes(response)){\n      // get trending anime from api\n      getTrendingManga = await getTrendingManga(genreReq);\n\n      // if no error detected, generate top 5 anime\n      if (!(getTrendingManga.includes('Error'))){\n        // convert to Javascript object\n        const trendingManga = JSON.parse(getTrendingManga);\n        tools.reply(`Here are the top 5 manga that are trending for ${genreReq} right now!`);\n        for (let i = 0; i < 5; i++) {\n          const mangaInfo = trendingManga['data'][i]['attributes'];\n            top5Manga = `Title: ${mangaInfo['canonicalTitle']} \n            Sypnosis: ${(mangaInfo['synopsis'])} \\n\n            Average Rating: ${mangaInfo['averageRating']} \\n\n            Status: ${mangaInfo['status']} \\n\n            No. of Volumes: ${mangaInfo['volumeCount']}\n            No. of Chapter: ${mangaInfo['chapterCount']}`;\n            tools.reply(await tools.formatMessage({content: top5Manga})); \n        }\n        // TRY BUT FAIL: generate all 5 in one message but overload.\n        // tools.reply(await tools.formatMessage({content: top5Anime}));\n      }\n      // if error detected, return error message and try again\n      else {\n        tools.reply(getTrendingManga)\n      }\n    }\n    // done generating trending anime\n    tools.reply('Let me know what more you want to query!')\n    // state.isTrendingMangaRequested = false;\n    // state.isGenreRequested = false;\n    // state.genreReq = ``;\n    resetState(state);\n  }\n //////////////////////////////////////////////////////////////////////////////////////////////////////////  \n}\nasync function getTrendingAnime(genreChoice) {\n  var apiURL = `https://kitsu.io/api/edge/anime?`;\n  if (genreChoice !==  \"null\"){\n    apiURL = `https://kitsu.io/api/edge/anime?filter[categories]=${genreChoice}`;\n  }\n  console.log(apiURL);\n  try {\n    const trending = await fetch(apiURL, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/vnd.api+json',\n      },\n    });\n    const trendingAnime = await trending.text();\n    return trendingAnime;\n  } catch (error) {\n    const errorMsg = `Error fetching trending anime: ${error}`;\n    console.error(errorMsg);\n    return errorMsg;\n  }\n}\nasync function getTrendingManga(genreChoice) {\n  var apiURL = `https://kitsu.io/api/edge/manga?`;\n  if (genreChoice !==  \"null\"){\n    apiURL = `https://kitsu.io/api/edge/manga?filter[categories]=${genreChoice}`;\n  }\n  try {\n    const trending = await fetch(apiURL, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/vnd.api+json',\n      },\n    });\n    const trendingManga = await trending.text();\n    return trendingManga;\n  } catch (error) {\n    const errorMsg = `Error fetching trending manga: ${error}`;\n    console.error(errorMsg);\n    return errorMsg;\n  }\n}\n\n\n// HANDLE SEARCH\nasync function handleSearch(payload, state, tools){\n  return;\n}\n\n// HANDLE QUOTE\nasync function handleGetQuote(payload, state, tools){\n  return;\n}\n\n// HANDLE IMAGE ID\nasync function handleIdentifyImage(payload, state, tools){\n  return;\n}\n","llmFunctions":[{"functionName":"getUserWants","description":"Get what the user wants.","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are a bot about anime and manga.\nYour job is to ask what does the user wants to query.\nIf the user wants trending anime, return only the string \"trending anime\".\nIf the user wants trending manga, return only the string \"trending manga\".\nIf its unclear, ask the user."},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.5,"topP":0.4,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"formatMessage","description":"Formatting Anime and Manga information in an organized markdown format","arguments":["content"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are an expert in organizing information.\nYou are to read the content that is passed to you and return it to markdown format\nMake sure that the information are displayed in the format below:\n# Witch Hunter Robin\\n\n## Synopsis\\n\nIt is the dark century and the people are suffering under the rule of the devil, Vandel, who is able to manipulate monsters. The Vandel Busters are a group of people who hunt these devils, and among them, the Zenon Squad is known to be the strongest busters on the continent. A young boy, Beet, dreams of joining the Zenon Squad. However, one day, as a result of Beet's fault, the Zenon squad was defeated by the devil, Beltose. The five dying busters sacrificed their life power into their five weapons, Saiga. After giving their weapons to Beet, they passed away. Years have passed since then and the young Vandel Buster, Beet, begins his adventure to carry out the Zenon Squad's will to put an end to the dark century.\\n\n**Average Rating**: 69.43/100\\n\n**Status**: finished\\n\n**No. of Episodes**: 52"},{"role":"user","content":"{{content}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0,"topP":0,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"getGenre","description":"To get what genre the use wants","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are to detect what genre the user wants for anime or manga.\nYou do so by FIRST asking what genre the user wants.\nDO NOT ASSUME THAT THE USER DONT MIND ANYTHING. ASK FIRST.\nIf it is unclear or if the user did not mention, CONTINUE asking for the genre preferred.\nIf the user does not have any preference or says anything, return only this string \"anything\".\nElse return only one genre that fit what the user wants in the genre list.\nDO NOT RECOMMEND ANY MANGA OR ANIME TO THE USERS. YOUR JOB IS ONLY TO RETURN THE DESIRED GENRE THE USER WANTS.\ngenre list= [\n      \"Comedy\",\n      \"Romance\",\n      \"Fantasy\",\n      \"Action\",\n      \"Drama\",\n      \"School Life\",\n      \"Adventure\",\n      \"Slice of Life\",\n      \"Yaoi\",\n      \"Science Fiction\",\n      \"Shoujo Ai\",\n      \"Ecchi\",\n      \"Sports\",\n      \"Historical\",\n      \"Music\",\n      \"Magic\",\n      \"Mystery\",\n      \"Supernatural\",\n      \"Harem\",\n      \"Japan\",\n      \"Psychological\",\n      \"Thriller\",\n      \"Shounen\",\n      \"Earth\",\n      \"Horror\",\n      \"Kids\",\n      \"Seinen\",\n      \"Present\",\n      \"Shounen Ai\",\n      \"Martial Arts\",\n      \"Asia\",\n      \"Shoujo\",\n      \"Isekai\",\n      \"Mecha\",\n      \"Demon\",\n      \"Super Power\",\n      \"Fantasy World\",\n      \"Violence\",\n      \"Military\",\n      \"Josei\"\n  ]\n\nIf the user responds \"yes\", ask what genre the user wants."},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.5,"topP":0.4,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"understandUserReq","description":"Discern what the user is requesting based on the available functions of the bot","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"user","content":"{{userMessage}}"},{"role":"system","content":"You are a helpful assistant and an expert in understanding user requests.\nYou need to read the user's request very carefully, and think through what it is asking.\n\nYou need to match the request based on the following mapping:\n1)\nname: get_trending\nDescription: User is requesting for the latest trending anime/manage\nexample: \"What is the latest trending {anime/manga}?\"\n\n2)\nname: search\nDescription: User is asking information related to an anime/manga\nexample: \"What is {anime_name} about?\"; \"Tell me more about {anime_name}\"; Or the user can simply type the name of the topic as such \"{anime_name}\"\n\n3)\nname: get_quote\nDescription:  User is requesting for an anime quote\nexample: \"Give me a random anime quote\"\n\n4)\nname: image_identify\nDescription: user is requesting to identify an anime/manga from an image source\nexample: \"What is this anime from the following image: {image_url}?\"\n\nReturn your answer in a JSON format:\n{\n    \"req_num\": number// number of the request based on the mapping\n    \"req_name\": string // name of the request. wrap it in \"\"\n    \"thought\": string // your thought process behind why you chose this\n}\n\nIf you are unable to identify the request. Return:\n\n{\n    \"req_num\": 999\n    \"req_name\": \"error\"// name of the request\n    \"thought\": string // your thought process behind why this is so\n}\n"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.1,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]}]}