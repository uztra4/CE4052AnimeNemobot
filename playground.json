{"thirdPartyDependencies":[],"code":"/** Handle the user message.\n * @param {string} payload the message sent by user\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\n// APIs\njikanBaseApi = `https://api.jikan.moe/v4`;\n\n// CONSTANTS\nconst defaultState = {\n  currentReq: null, // current user's request\n  isTrendingAnimeRequested: false, //if trending anime is requested\n  isTrendingMangaRequested: false, //if trending anime is requested\n  isGenreRequested: false, //if genre is asked\n  genreReq: null, //store the preferred genre\n  quoteReq: null, //store what kind of quote request they want\n};\n\nconst genreList = [\n  \"anything\",\n  \"Comedy\",\n  \"Romance\",\n  \"Fantasy\",\n  \"Action\",\n  \"Drama\",\n  \"School Life\",\n  \"Adventure\",\n  \"Slice of Life\",\n  \"Yaoi\",\n  \"Science Fiction\",\n  \"Shoujo Ai\",\n  \"Ecchi\",\n  \"Sports\",\n  \"Historical\",\n  \"Music\",\n  \"Magic\",\n  \"Mystery\",\n  \"Supernatural\",\n  \"Harem\",\n  \"Japan\",\n  \"Psychological\",\n  \"Thriller\",\n  \"Shounen\",\n  \"Earth\",\n  \"Horror\",\n  \"Kids\",\n  \"Seinen\",\n  \"Present\",\n  \"Shounen Ai\",\n  \"Martial Arts\",\n  \"Asia\",\n  \"Shoujo\",\n  \"Isekai\",\n  \"Mecha\",\n  \"Demon\",\n  \"Super Power\",\n  \"Fantasy World\",\n  \"Violence\",\n  \"Military\",\n  \"Josei\",\n];\n// anything that prompts that the bot is going the right direction\n// can just declare as positive.includes(response)\nconst positive = [\"ok\", \"sure\", \"correct\", \"fine\", \"yes\"];\n\nconst reqList = `\n- Providing trending anime or manga based on genre, rating etc. \n- Searching information about an anime/manga\n- Getting a random anime quote\n- Identifying an anime from an image\n`;\n\nconst jikanGenresMapping = {\n  genres: [\n    { mal_id: 1, genre: \"Action\" },\n    { mal_id: 2, genre: \"Adventure\" },\n    { mal_id: 5, genre: \"Avant Garde\" },\n    { mal_id: 46, genre: \"Award Winning\" },\n    { mal_id: 28, genre: \"Boys Love\" },\n    { mal_id: 4, genre: \"Comedy\" },\n    { mal_id: 8, genre: \"Drama\" },\n    { mal_id: 10, genre: \"Fantasy\" },\n    { mal_id: 26, genre: \"Girls Love\" },\n    { mal_id: 47, genre: \"Gourmet\" },\n    { mal_id: 14, genre: \"Horror\" },\n    { mal_id: 7, genre: \"Mystery\" },\n    { mal_id: 22, genre: \"Romance\" },\n    { mal_id: 24, genre: \"Sci-Fi\" },\n    { mal_id: 36, genre: \"Slice of Life\" },\n    { mal_id: 30, genre: \"Sports\" },\n    { mal_id: 37, genre: \"Supernatural\" },\n    { mal_id: 41, genre: \"Suspense\" },\n    { mal_id: 9, genre: \"Ecchi\" },\n    { mal_id: 49, genre: \"Erotica\" },\n    { mal_id: 12, genre: \"Hentai\" },\n    { mal_id: 50, genre: \"Adult Cast\" },\n    { mal_id: 51, genre: \"Anthropomorphic\" },\n    { mal_id: 52, genre: \"CGDCT\" },\n    { mal_id: 53, genre: \"Childcare\" },\n    { mal_id: 54, genre: \"Combat Sports\" },\n    { mal_id: 81, genre: \"Crossdressing\" },\n    { mal_id: 55, genre: \"Delinquents\" },\n    { mal_id: 39, genre: \"Detective\" },\n    { mal_id: 56, genre: \"Educational\" },\n    { mal_id: 57, genre: \"Gag Humor\" },\n    { mal_id: 58, genre: \"Gore\" },\n    { mal_id: 35, genre: \"Harem\" },\n    { mal_id: 59, genre: \"High Stakes Game\" },\n    { mal_id: 13, genre: \"Historical\" },\n    { mal_id: 60, genre: \"Idols (Female)\" },\n    { mal_id: 61, genre: \"Idols (Male)\" },\n    { mal_id: 62, genre: \"Isekai\" },\n    { mal_id: 63, genre: \"Iyashikei\" },\n    { mal_id: 64, genre: \"Love Polygon\" },\n    { mal_id: 65, genre: \"Magical Sex Shift\" },\n    { mal_id: 66, genre: \"Mahou Shoujo\" },\n    { mal_id: 17, genre: \"Martial Arts\" },\n    { mal_id: 18, genre: \"Mecha\" },\n    { mal_id: 67, genre: \"Medical\" },\n    { mal_id: 38, genre: \"Military\" },\n    { mal_id: 19, genre: \"Music\" },\n    { mal_id: 6, genre: \"Mythology\" },\n    { mal_id: 68, genre: \"Organized Crime\" },\n    { mal_id: 69, genre: \"Otaku Culture\" },\n    { mal_id: 20, genre: \"Parody\" },\n    { mal_id: 70, genre: \"Performing Arts\" },\n    { mal_id: 71, genre: \"Pets\" },\n    { mal_id: 40, genre: \"Psychological\" },\n    { mal_id: 3, genre: \"Racing\" },\n    { mal_id: 72, genre: \"Reincarnation\" },\n    { mal_id: 73, genre: \"Reverse Harem\" },\n    { mal_id: 74, genre: \"Romantic Subtext\" },\n    { mal_id: 21, genre: \"Samurai\" },\n    { mal_id: 23, genre: \"School\" },\n    { mal_id: 75, genre: \"Showbiz\" },\n    { mal_id: 29, genre: \"Space\" },\n    { mal_id: 11, genre: \"Strategy Game\" },\n    { mal_id: 31, genre: \"Super Power\" },\n    { mal_id: 76, genre: \"Survival\" },\n    { mal_id: 77, genre: \"Team Sports\" },\n    { mal_id: 78, genre: \"Time Travel\" },\n    { mal_id: 32, genre: \"Vampire\" },\n    { mal_id: 79, genre: \"Video Game\" },\n    { mal_id: 80, genre: \"Visual Arts\" },\n    { mal_id: 48, genre: \"Workplace\" },\n    { mal_id: 43, genre: \"Josei\" },\n    { mal_id: 15, genre: \"Kids\" },\n    { mal_id: 42, genre: \"Seinen\" },\n    { mal_id: 25, genre: \"Shoujo\" },\n    { mal_id: 27, genre: \"Shounen\" },\n  ],\n};\n\nconst jikanGenres = [\n  \"action\",\n  \"adventure\",\n  \"avant garde\",\n  \"award winning\",\n  \"boys love\",\n  \"comedy\",\n  \"drama\",\n  \"fantasy\",\n  \"girls love\",\n  \"gourmet\",\n  \"horror\",\n  \"mystery\",\n  \"romance\",\n  \"sci-fi\",\n  \"slice of life\",\n  \"sports\",\n  \"supernatural\",\n  \"suspense\",\n  \"ecchi\",\n  \"erotica\",\n  \"hentai\",\n  \"adult cast\",\n  \"anthropomorphic\",\n  \"cgdct\",\n  \"childcare\",\n  \"combat sports\",\n  \"crossdressing\",\n  \"delinquents\",\n  \"detective\",\n  \"educational\",\n  \"gag humor\",\n  \"gore\",\n  \"harem\",\n  \"high stakes game\",\n  \"historical\",\n  \"idols (female)\",\n  \"idols (male)\",\n  \"isekai\",\n  \"iyashikei\",\n  \"love polygon\",\n  \"magical sex shift\",\n  \"mahou shoujo\",\n  \"martial arts\",\n  \"mecha\",\n  \"medical\",\n  \"military\",\n  \"music\",\n  \"mythology\",\n  \"organized crime\",\n  \"otaku culture\",\n  \"parody\",\n  \"performing arts\",\n  \"pets\",\n  \"psychological\",\n  \"racing\",\n  \"reincarnation\",\n  \"reverse harem\",\n  \"romantic subtext\",\n  \"samurai\",\n  \"school\",\n  \"showbiz\",\n  \"space\",\n  \"strategy game\",\n  \"super power\",\n  \"survival\",\n  \"team sports\",\n  \"time travel\",\n  \"vampire\",\n  \"video game\",\n  \"visual arts\",\n  \"workplace\",\n  \"josei\",\n  \"kids\",\n  \"seinen\",\n  \"shoujo\",\n  \"shounen\",\n];\n\nconst jikanTypeList = {\n  anime: [\n    \"tv\",\n    \"movie\",\n    \"ova\",\n    \"special\",\n    \"ona\",\n    \"music\",\n    \"cm\",\n    \"pv\",\n    \" tv_special\",\n  ],\n  manga: [\n    \"manga\",\n    \"novel\",\n    \"lightnovel\",\n    \"oneshot\",\n    \"doujin\",\n    \"manhwa\",\n    \"manhua\",\n  ],\n};\nasync function run(payload, state, tools) {\n  // console.log(\"In Run: \", state)\n  try {\n    if (!state.currentReq) {\n      res = await tools.understandUserReq({ userMessage: payload });\n      // console.log(res);\n      state.currentReq = JSON.parse(res);\n    }\n\n    console.log(\"In run, request detected: \", state.currentReq);\n\n    switch (state.currentReq.req_num) {\n      case 1:\n        handleTrending(payload, state, tools);\n        break;\n      case 2:\n        handleSearch(payload, state, tools);\n        break;\n      case 3:\n        handleGetQuote(payload, state, tools);\n        break;\n      case 4:\n        handleIdentifyImage(payload, state, tools);\n        break;\n      default:\n        handleError(state, tools);\n    }\n  } catch (e) {\n    console.log(e);\n    handleError(state, tools);\n  }\n}\n\n/** Startup.\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\nasync function startup(state, tools) {\n  tools.reply(`Hello! Welcome to the Anime Query Bot. Here are some\n  information I can provide you!\n  ${reqList}`);\n\n  // Setting state\n  resetState(state);\n}\n\n/** Unit test.\n * @param {Test} test define a test case\n * @param {Tool} tools available tools to perform a task\n */\nfunction unitTest(test, tools) {\n  test(\"Test 1\", 1, async (expect) => {\n    expect(true).toBeTrue();\n  });\n}\n\nasync function handleError(state, tools) {\n  tools.reply(`I'm sorry, I do not understand your request. Here is a list of topics I can assist you in:\n  ${reqList}`);\n\n  resetState(state);\n}\n\nfunction resetState(state) {\n  for (let key in defaultState) {\n    state[key] = defaultState[key];\n  }\n  console.log(\"Reset done.\", state);\n}\n\n// HANDLE TRENDING\nasync function handleTrending(payload, state, tools) {\n  console.log(\"In handletrending; \", state);\n  const apiURL = `https://kitsu.io/api/edge/`;\n  const trendingReq = await tools.trendingReq({userMessage: payload}, {memory: tools.getChatHistory(5)});\n  console.log(trendingReq);\n\n  try {\n    const trendingReqJSON = JSON.parse(trendingReq);\n    const trendingData = await getTrending(trendingReq);\n    const updatedTime = new Date(JSON.parse(trendingData)[\"data\"][0][\"attributes\"][\"updatedAt\"]);\n    if (trendingReqJSON[\"req\"] === \"trending\") {\n      if (trendingReqJSON[\"genre\"] !== null){\n        tools.reply(`We cannot provide trending ${trendingReqJSON[\"type\"]} right now.`)\n      }\n    }\n    tools.reply(`Generating 5 ${trendingReqJSON[\"req\"]} ${trendingReqJSON[\"type\"]} now!\\n\n    Information updated on ${updatedTime.toDateString()} ${updatedTime.toLocaleTimeString()}`);\n    for (let i = 0; i < 5; i++) {\n      const topData = JSON.parse(trendingData)[\"data\"][i][\"attributes\"];\n      // some titles not included in the data hence need to define manually\n      if (typeof topData[\"canonicalTitle\"] !== \"undefined\"){\n        var title = topData[\"canonicalTitle\"];\n      } else if (typeof topData[\"titles\"][\"en\"] !== \"undefined\"){\n        var title = topData[\"titles\"][\"en\"];\n      } else if (typeof topData[\"titles\"][\"en_jp\"] !== \"undefined\"){\n        var title = topData[\"titles\"][\"en_jp\"];\n      } else if (typeof topData[\"titles\"][\"en_us\"] !== \"undefined\") {\n        var title = topData[\"titles\"][\"en_us\"];\n      }\n      var [volCount, chapCount] = [topData['volumeCount'], topData['chapterCount']];\n      if (trendingReqJSON[\"type\"] === \"manga\" && (volCount === null || chapCount === null)){\n        [volCount, chapCount] = await getChapterVolume(title);\n      } \n      if (trendingReqJSON[\"type\"] === \"anime\"){\n        info = `Title: ${title}\\n\n        Image: ${(topData['posterImage']['small'])}\\n \n        Sypnosis: ${topData[\"synopsis\"]} \\n\n        Average Rating: ${topData[\"averageRating\"]} \\n\n        Status: ${topData[\"status\"]} \\n\n        No. of Episodes: ${topData[\"episodeCount\"]}\\n\n        Trailer Link: ${topData[\"youtubeVideoId\"]}`;\n      } \n      else if (trendingReqJSON[\"type\"] === \"manga\"){\n        info = `Title: ${title}\\n\n        Image: ${(topData['posterImage']['small'])}\\n \n        Sypnosis: ${topData[\"synopsis\"]} \\n\n        Average Rating: ${topData[\"averageRating\"]} \\n\n        Status: ${topData[\"status\"]} \\n\n        No. of Volumes: ${volCount}\\n\n        No. of Chapter: ${chapCount}`;\n      }\n      tools.reply(await tools.formatMessage({ content: info }));\n    }\n    tools.reply(`Let me know what more you want to query!`);\n  } catch (error) {\n    console.log(error);\n    tools.reply(trendingReq);\n  }\n\n  async function getChapterVolume(title){\n    console.log(title);\n    const apiURL = `https://api.mangadex.org/manga?title=${title}`;\n    try {\n      const mangaInfo = await fetch(apiURL, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const mangaInfoText = await mangaInfo.text();\n      const mangaInfoJson = JSON.parse(mangaInfoText)[\"data\"][0][\"attributes\"];\n      console.log([mangaInfoJson[\"lastVolume\"], mangaInfoJson[\"lastChapter\"]]);\n      return [mangaInfoJson[\"lastVolume\"], mangaInfoJson[\"lastChapter\"]];\n    } catch (error) {\n      const errorMsg = `Error fetching trending manga: ${error}`;\n      console.error(errorMsg);\n      return errorMsg;\n    }\n  }\n  async function getTrending(trendingReq){\n    try {\n      const trendingReqJSON = JSON.parse(trendingReq);\n      switch (trendingReqJSON[\"req\"]){\n        case \"top\":\n          apiURLSearch = apiURL + trendingReqJSON[\"type\"];\n          if (trendingReqJSON[\"genre\"] === null){\n            apiURLSearch = apiURLSearch;\n          } else {\n            apiURLSearch = apiURLSearch + `?filter[categories]=${trendingReqJSON[\"genre\"]}`;\n          }\n          break;\n        case \"trending\":\n          var apiURLSearch = apiURL + `trending/` + trendingReqJSON[\"type\"];\n          break;\n          \n      }\n    } catch (error){\n      tools.reply(trendingReq);\n    }\n    console.log(apiURLSearch)\n    try {\n      const trending = await fetch(apiURLSearch, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/vnd.api+json\",\n        },\n      });\n      const trendingText = await trending.text();\n      return trendingText;\n    } catch (error) {\n      const errorMsg = `Error fetching trending manga/anime: ${error}`;\n      console.error(errorMsg);\n      return errorMsg;\n    }\n  }\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n}\n\nconst searchResponseType = {\n  NAME: \"NAME\",\n  GENRE: \"GENRE\",\n  STATUS: \"STATUS\",\n  GUESS: \"GUESS\",\n};\n\nconst statusType = {\n  AIRING: \"airing\",\n  COMPLETE: \"complete\",\n  UPCOMING: \"upcoming\",\n};\n\nasync function handleSearch(payload, state, tools) {\n  /*\n  This function extracts out the details from the user's message and tries to find related information.\n  If an anime is specified -> return that info\n  If an anime is 'described' and a guess is made -> return that info + others?\n  Else if genres -> return a list of animes suiting the genre\n  */\n  // Extract detected of Genres\n  const { validGenres, invalidGenres, genre_ids } = await handleExtractGenres(\n    payload,\n    tools\n  );\n\n  // console.log(genre_ids);\n  // Get status\n  const status_res = JSON.parse(\n    await tools.statusExtractor({ userMessage: payload })\n  );\n  // console.log(\"handleSearch, status: \", status_res);\n\n  // Get details\n  const res_ai = JSON.parse(\n    await tools.searchHelper(\n      { userMessage: payload },\n      {\n        memory: tools.getChatHistory(0),\n        externalTool: {\n          getTypeList: () => {\n            return `${jikanTypeList}`;\n          },\n        },\n      }\n    )\n  );\n\n  console.log(\n    \"handleSearch: \",\n    res_ai,\n    \"\\nStatus: \",\n    status_res,\n    `\\nValidG: ${validGenres}\\nInvalidG: ${invalidGenres}`\n  );\n\n  // Check res_ai\n  if (!res_ai.hasOwnProperty(\"target\")) {\n    tools.reply(\n      \"I'm sorry. I did not quite understand your request. Perhaps you can try phrasing it differently?\"\n    );\n  } else {\n    const { is_guess, name_detected, target, name, type } = res_ai;\n    // Returns ?queries\n    try {\n      let { queryName, queryGenre, switch_exp } = formQueryParams(\n        invalidGenres,\n        res_ai,\n        status_res.status,\n        genre_ids,\n        tools\n      );\n\n      let api_base = `${jikanBaseApi}/${target}?`;\n\n      let data;\n      let noDataMessage =\n        \"I'm sorry, but I am unable to find information regarding your request.\";\n      switch (switch_exp) {\n        case searchResponseType.STATUS: // Detected status related query\n          data = await jikanQuery(api_base + queryGenre);\n          if (data.length > 0) {\n            tools.reply(\n              `I've found some ${status_res.status} ${target} that may interest you:`\n            );\n            cur_idx = 0;\n            while (cur_idx < data.length && cur_idx < 4) {\n              await formatInfoResponse(data[cur_idx], tools);\n              cur_idx++;\n            }\n          } else tools.reply(noDataMessage);\n\n          break;\n        case searchResponseType.NAME: // Name detected\n          data = await jikanQuery(api_base + queryName);\n          if (data.length > 0) {\n            tools.reply(\n              `Here is more information about the ${target} _${name}_`\n            );\n            await formatInfoResponse(data[0], tools);\n          } else tools.reply(noDataMessage);\n          break;\n        case searchResponseType.GUESS: // Name guessed\n          tools.reply(`You may be thinking of the ${target} _${name}_`);\n          data = await jikanQuery(api_base + queryName);\n          // Get first\n          await formatInfoResponse(data[0], tools);\n          // Other\n          if (queryGenre) {\n            let data2 = await jikanQuery(api_base + queryGenre);\n            if (data2.length > 0) {\n              tools.reply(`Other relevant ${target} may be:`);\n              // Loop\n              cur_idx = 0;\n              while (cur_idx < data2.length && cur_idx < 3) {\n                await formatInfoResponse(data2[cur_idx], tools);\n                cur_idx++;\n              }\n            }\n          }\n          break;\n        case searchResponseType.GENRE: // No Name detected -> Use Genre\n          data = await jikanQuery(api_base + queryGenre);\n          if (data.length > 0) {\n            tools.reply(\n              `Based on your description, here are some ${target} that may be of interest:`\n            );\n            cur_idx = 0;\n            while (cur_idx < data.length && cur_idx < 4) {\n              await formatInfoResponse(data[cur_idx], tools);\n              cur_idx++;\n            }\n          } else tools.reply(noDataMessage);\n          break;\n        default:\n          tools.reply(\n            `I'm afraid I do not understand your request. Try specifying a genre or describing the ${target}.`\n          );\n      }\n    } catch (e) {\n      console.log(\"Error in handleSearch: \", e);\n      tools.reply(\n        \"Oops... It appears something has gone wrong. Please try again.\"\n      );\n    }\n  }\n  tools.reply(\"Please let me know if you require anymore assistance!\");\n  resetState(state, tools);\n}\n\nasync function handleExtractGenres(payload, tools) {\n  const { genres, thought } = JSON.parse(\n    await tools.genreExtractor(\n      {\n        userMessage: payload,\n      },\n      {\n        memory: tools.getChatHistory(1),\n        externalTool: {\n          getGenreList: () => {\n            return `The genres are ${jikanGenres}`;\n          },\n          getIgnoreList: () => {\n            // return undefined;\n            return `You must never include these words ${jikanTypeList} and 'anime'`;\n          },\n        },\n      }\n    )\n  );\n  // console.log(\"handleExtractGenres, genres: \", genres);\n  // console.log(\"handleExtractGenres, thought: \", thought);\n  let validGenres = [];\n  let invalidGenres = [];\n  // keep valid genres\n  for (let g of genres) {\n    if (jikanGenres.includes(g.toLowerCase()))\n      validGenres.push(g.toLowerCase());\n    else invalidGenres.push(g);\n  }\n\n  // console.log(\"handleExtractGenres, validGenres: \", validGenres);\n  // console.log(\"handleExtractGenres, invalidGenres: \", invalidGenres);\n\n  // Match Genre Ids\n  let genre_ids = matchGenreWithMalIDs(validGenres);\n\n  // console.log(\"In handleExtractGenres, genre_ids: \", genre_ids);\n\n  return { genre_ids, invalidGenres, validGenres };\n}\n\nfunction matchGenreWithMalIDs(genres) {\n  ids = [];\n  jikanGenresMapping.genres.forEach((g) => {\n    if (genres.includes(g.genre.toLowerCase())) {\n      ids.push(g.mal_id);\n    }\n  });\n  return ids;\n}\n\nfunction formQueryParams(\n  invalidGenres,\n  { name_detected, is_guess, target, name, type },\n  status,\n  genre_ids,\n  tools\n) {\n  let query = `type=${type}`;\n  let queryName = null;\n  let queryGenre = null;\n  let switch_exp = 0;\n\n  // Name detected\n  if (name_detected && !is_guess) {\n    queryName = `${query}&q=${name}`;\n    switch_exp = searchResponseType.NAME;\n    if (status === statusType.UPCOMING) {\n      queryName += `&status=${status}`;\n      // switch_exp = searchResponseType.STATUS;\n    }\n  } else {\n    if (is_guess) {\n      queryName = `${query}&q=${name}`;\n      switch_exp = searchResponseType.GUESS;\n    }\n    // For Genre Queries\n    if (genre_ids.length !== 0 || invalidGenres.length !== 0) {\n      genres_string = genre_ids.join(\",\");\n      invalidGenresString = invalidGenres.join(\",\");\n      queryGenre = query;\n      if (genre_ids.length !== 0) {\n        queryGenre += `&genres=${genres_string}`;\n      }\n\n      if (invalidGenres.length !== 0) {\n        queryGenre += `&q=${invalidGenresString}`;\n      }\n\n      // If no exp set\n      switch_exp = switch_exp === 0 ? searchResponseType.GENRE : switch_exp;\n    }\n\n    if (status === statusType.UPCOMING) {\n      queryGenre =\n        queryGenre === null\n          ? `${query}&status=${status}`\n          : `${queryGenre}&status=${status}`;\n      switch_exp =\n        switch_exp !== searchResponseType.GUESS\n          ? searchResponseType.STATUS\n          : switch_exp;\n    }\n  }\n\n  return { queryName, queryGenre, switch_exp };\n}\n\nasync function formatInfoResponse(content, tools) {\n  let formatted_info = await tools.formatMessage({\n    content: JSON.stringify(content),\n  });\n  // console.log(formatted_info);\n  tools.reply(formatted_info);\n}\n\nasync function jikanQuery(api) {\n  console.log(\"jikanQuery, api: \", api);\n  const res = await fetch(api);\n  const res_json = await res.json();\n  const data = res_json.data;\n  // console.log(\"jikanQuery, data: \", data);\n\n  return data;\n}\n\n// HANDLE QUOTE\n\nasync function handleGetQuote(payload, state, tools) {\n  console.log(\"In handleGetQuote; \", state);\n  const quoteReq = await tools.quoteReq(\n    { userMessage: payload },\n    { memory: tools.getChatHistory(5) }\n  );\n  console.log(quoteReq);\n  try {\n    const quotes = await getQuote(quoteReq);\n    console.log(JSON.parse(quotes)[\"error\"]);\n    if (JSON.parse(quotes)[\"error\"] === \"No related quotes found!\") {\n      tools.reply(\"No related quotes found!\");\n    } else {\n      tools.reply(\"Generating quote...\");\n      tools.reply(await tools.formatQuote({ content: quotes })); // Reply with the quotes\n      resetState(state);\n    }\n  } catch (error) {\n    tools.reply(quoteReq);\n  }\n\n  async function getQuote(quoteReq) {\n    quoteReqJson = JSON.parse(quoteReq);\n    console.log(quoteReqJson[\"returnType\"]);\n    var apiURL = `https://animechan.xyz/api/random/`;\n    switch (quoteReqJson[\"returnType\"]) {\n      case \"random\":\n        apiURLSearch = `https://animechan.xyz/api/random`;\n        break;\n      case \"anime\":\n        apiURLSearch = apiURL + `anime?title=` + quoteReqJson[\"en\"];\n        break;\n      case \"character\":\n        apiURLSearch = apiURL + `character?name=` + quoteReqJson[\"character\"];\n        break;\n    }\n    console.log(apiURLSearch);\n    try {\n      var response = await fetch(apiURLSearch);\n      // Check if the response status is ok\n      if (!response.ok) {\n        if (quoteReqJson[\"returnType\"] === \"anime\") {\n          apiURLSearch = apiURL + `anime?title=` + quoteReqJson[\"en_jp\"];\n          response = await fetch(apiURLSearch);\n          console.log(apiURLSearch);\n          console.log(response);\n        }\n      }\n      // Parse the response as JSON\n      const data = await response.json();\n      // Handle the JSON data\n      console.log(\"Data:\", data);\n      console.log(JSON.stringify(data));\n      // Construct quotesData\n      return JSON.stringify(data);\n    } catch (error) {\n      // Handle errors\n      console.error(\"Error fetching data:\", error);\n      // Return error message\n      return \"No related quotes found!\";\n    }\n  }\n}\n\n// HANDLE IMAGE ID\nasync function handleIdentifyImage(payload, state, tools) {\n  resetState(state, tools);\n  return;\n}\n","llmFunctions":[{"functionName":"trendingReq","description":"Get what trending anime/manga the user wants.","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are a bot about anime and manga.\nYour job is to ask what the user wants to query for trending anime or trending manga. They can either query about manga or anime. You are to return according to the cases below. If it does not satisfy any of the case, please prompt for more information.\n\nThere are 3 cases for the trending anime manga request.\n\nCase 1: User is looking for currently trending anime.\nInstruction for Case 1: Define req as trending if the user wants currently trending anime else define req as trending if the user wants currently trending manga. Define genre as null. Define type as either manga or anime depending on what the user wants.\nExamples for Case 1: \"Latest trending anime\", \" recent trending anime\", \"trending manga\"\n\nCase 2: User is looking for top anime or manga.\nInstruction for Case 2: A genre may be specified in the message. You are to detect the genre specified and it must be part of the genreList. Define req as top. Define the type as anime or manga depending on what the user ask for. Define genre as the genre that is detected.  If none is detected, then return null.\nExamples for Case 2: \"Top anime for {genre}\", \"Anime for {genre}\", \"Top {genre} anime\", \"Top manga for {genre}\", \"Manga for {genre}\", Top {genre} manga\", \"Top anime\", Top manga\"\n\n\nconst genreList = [\n  \"anything\",\n  \"Comedy\",\n  \"Romance\",\n  \"Fantasy\",\n  \"Action\",\n  \"Drama\",\n  \"School Life\",\n  \"Adventure\",\n  \"Slice of Life\",\n  \"Yaoi\",\n  \"Science Fiction\",\n  \"Shoujo Ai\",\n  \"Ecchi\",\n  \"Sports\",\n  \"Historical\",\n  \"Music\",\n  \"Magic\",\n  \"Mystery\",\n  \"Supernatural\",\n  \"Harem\",\n  \"Japan\",\n  \"Psychological\",\n  \"Thriller\",\n  \"Shounen\",\n  \"Earth\",\n  \"Horror\",\n  \"Kids\",\n  \"Seinen\",\n  \"Present\",\n  \"Shounen Ai\",\n  \"Martial Arts\",\n  \"Asia\",\n  \"Shoujo\",\n  \"Isekai\",\n  \"Mecha\",\n  \"Demon\",\n  \"Super Power\",\n  \"Fantasy World\",\n  \"Violence\",\n  \"Military\",\n  \"Josei\",\n];\nReturn in the JSON format below:\n{\nreq: //either top or trending\ntype:  //either anime or manga\ngenre: //any genre on the genreList or null\n}\n"},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.5,"topP":0.4,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"formatMessage","description":"Formatting messages in an organized markdown format","arguments":["content"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"RULES: \nYou need to keep your message up to 2500 tokens. Therefore, you must try your best in summarizing the information.\n\nYou are an expert in organizing information.\nYou are to read the content that is passed to you and return it to markdown format\n\nSome content passed to you may contain an image. This may be found in a property \"images\". You MUST refer to this and display the image if possible.\n\nSome content passed to you may contain a trailer link. Add this link to the bottom of the displayed information.\n\nMake sure to summarize the synopsis.\n\nMake sure that the information are displayed in the format below. Display it in a relevant markdown format:\n# {title in {{content}}}\\n\n{IMAGE picture if it is given in the {{content}}}\n## Synopsis\\n\n{Synopsis in {{content}}}\n**Average Rating**: {Average Rating in {{content}}}\\n\n**Status**: {Status in {{content}}}\\n\n**No. of Episodes**: {No. of Episodes in {{{content}}}\\n //for anime \n**No. of Volumes**: {No. of Volumes in {{{content}}}\\n //for manga\n**No. of Chapters**: {No. of Chapters in {{{content}}}\\n //for manga\nAll other relevant information, excluding synopsis.\n\nFor manga information, there is no trailer links so you MUST NOT add that into the response."},{"role":"user","content":"{{content}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0,"topP":0,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"understandUserReq","description":"Discern what the user is requesting based on the available functions of the bot","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"user","content":"{{userMessage}}"},{"role":"system","content":"You are a helpful assistant and an expert in understanding user requests.\nYou need to read the user's request very carefully, and think through what it is asking.\n\nYou need to match the request based on the following mapping:\n1)\nname: get_trending\nDescription: User is requesting for the latest trending anime/manage. The request may contain keywords such as \"trending\". \nexample: \"What is the latest trending {anime/manga}?\"\n\n2)\nname: search\nDescription: User is asking information related to an anime/manga. The request may be asking general information about anime, or even ask about anime that are going to be released, upcoming, have completed, or is currently airing. The request may contain keywords such as \"search\".\nexample: \"What is {anime_name} about?\"; \"Tell me more about {anime_name}\"; Or the user can simply type the name of the topic as such \"{anime_name}\"\n\n3)\nname: get_quote\nDescription:  User is requesting for an anime quote\nexample: \"Give me a random anime quote\"\n\n4)\nname: image_identify\nDescription: user is requesting to identify an anime/manga from an image source\nexample: \"What is this anime from the following image: {image_url}?\"\n\nReturn your answer in a JSON format:\n{\n    \"req_num\": number// number of the request based on the mapping\n    \"req_name\": string // name of the request. wrap it in \"\"\n    \"thought\": string // your thought process behind why you chose this\n}\n\nIf you are unable to identify the request. Return:\n\n{\n    \"req_num\": 999\n    \"req_name\": \"error\"// name of the request\n    \"thought\": string // your thought process behind why this is so\n}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.1,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"quoteReq","description":"Detect what quote request type the user wants.","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"user","content":"{{userMessage}}"},{"role":"system","content":"You are an anime bot. You are expert in anime or anime characters.\nYour job is to detect the type of quote request the user wants.\n\nThere are 3 cases of quote requests. They can ask to generate a quote from an anime, generate a quote from an anime character or generate a random quote.\n\nDetermine which case it satisfies. For each case, follow the instructions to respond to the request.\n\nCase 1: An anime title is detected. User wants a quote from an anime.\nExamples that satisfy Case 1: \"quotes from {anime}\"\nActions for Case 1: Define en as the anime name in English and en_jp as the anime name in Romanization Japanese. Define returnType as \"anime\". Define character as null.\n\nCase 2: An anime character is detected. User wants quote from a specific anime character.\nExamples that satisfy Case 2: \"quotes from {anime character}\"\nActions for Case 2: Search for the anime name, note that the name typed\nmay have typo errors or not in full form, but try to identify the anime title. Define en as the anime name in English and en_jp as the anime name in Romaji Translation. Define returnType as \"character\". Define character as the Romaji Translation of the character's name.\n\nCase 3: User wants a random quote.\nExamples that satisfy Case 3: \"generate a random quote\", \"quote\", \"give me a quote.\"\nActions for Case 3: Define returnType as \"random\" and define en, en_jp and character as null.\n\nReturn in this JSON format:\n{\nreturnType: //\"random\", \"anime\" or \"character\"\nen: //anime title in English\nen_jp: //anime title in Japanese Romanization\ncharacter: //character from the anime stated in userMessage if available.\n}\n\n5. If you think it satisfy none of the cases, do not assume, prompt the user for more information."}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.5,"topP":0.5,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"genreExtractor","description":"Extract out the valid genre from the user's request","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are a helpful assistant and an expert in identifying valid genres. You are not trying to guess what the genre may be. Instead, you should only refer the words of the user. You should only use words that the message contains. \n\nYou can refer to the external tool which returns you a string of genres that you can crosscheck with the user's message and pick the right ones. Only use this to help you phrase the genre you want to return\n\nYou can also pick out keywords as genres from the user's message that is not in the genre list! For example, if the user's message mentions \"pirates\", \"ninjas\" etc, you must also return these. However, there are some words you cannot include in YOUR RESPONSE. You can cross-check what these words are using 'getIgnoreList' function. \n\nWhen you are constructing your response, you need to think:\n1) Am I guessing the genre? If you are guessing the genre, do not ever include it.\n2) Is the genre I am responding with mentioned explicitly in the user's message? If yes, then it is fine, you can include it in your response. If not, DO NOT INCLUDE IT in your response.\n\nRULES YOU MUST FOLLOW:\nWords describing the type of media (\"tv\", \"movie\", \"anime\", \"manga\", \"ova\" etc) MUST NOT BE INCLUDED IN YOUR RESPONSE.\nBefore you return your response, check what words need to be ignored and remove them from your response\n\nYou should return your answer in the following JSON Format:\n{\n\"genres\": list of strings // what you think are considered genres/keywords. Cannot be \"anime\", \"movie\" etc\n\"thought\": string // Why you chose these genres\n}"},{"role":"user","content":"Message: {{userMessage}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.2,"topP":0.1,"frequencyPenalty":0,"presencePenalty":0},"functions":[{"name":"getGenreList","description":"Returns a list of valid genres for you to cross check with the user's message","parameters":"{\n  \"type\": \"object\",\n  \"properties\": {}\n}"},{"name":"getIgnoreList","description":"Returns words that you cannot include in your response","parameters":"{\n  \"type\": \"object\",\n  \"properties\": {}\n}"}]},{"functionName":"statusExtractor","description":"Extracts a status from the user's message.","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are a helpful assistant and are extremely good at understanding the meaning of requests.\n\nIMPORTANT RULES YOU NEED TO FOLLOW:\nThe status you return can only take the values [\"upcoming\", \"complete\",  \"airing\", null] \n\nYour ONLY role is to read the user's request carefully, and see if there is any 'status'. \n\nA 'status' refers the current state of a manga or anime. It can take on the values of \"upcoming\", \"complete\", \"airing\" or null if there is no status that you can detect.\n\n\nThink about why you identified the status as such. \n\nExample of user's request: \"What anime is coming soon?\"\nStatus you should return: \"upcoming\"\nReason: The request is asking for anime that are \"coming soon\", this means that they are not yet released and thus, \"upcoming\".\n\nAnother example: \"What is XXX anime about?\"\nStatus you should return: null\nReason: The request is merely asking about XXX anime, you should not include a status in such a scenario\n\nReturn your response in the following JSON format:\n{\n\"status\": string // can be null if no status is detected.  The status you return can only take the values [\"upcoming\", \"complete\",  \"airing\", null] \n\"thought\": string // your thought process as to why you decided this.\n}\n\n\nIf no status is detected, return null."},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"searchHelper","description":"Helper to identify user's request regarding anime/manga","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are a helpful assistant and an expert on all manga and anime.\n\nYour job is to read the user's request carefully and try to understand the anime or manga details from the request.\n\nYou also need to identify any other relevant details that the user is requesting. The following is a list of details you should look out for IN THE USER'S REQUEST:\n\n{\nname: name of the anime/manga from the message. If it is not explicitly mentioned, but the user has provided a description of the character, you can guess what anime he/she is referring to\ntype: refers to if it's a TV series, movie etc.\n}\n\nExamples of ways user may ask but not limited to the following:\n\"What is {name of anime/manga} about?\" or simply saying \"{name of anime/manga}\" or the user may even give you a description about the character, in which case, make your best guess as to the anime/manga.\n\nRules you NEED to follow:\n- For any property with [required], you must include that property in the response. Else, you can exclude it.\n- \"target\" should only be the following string values [\"anime\", \"manga\"]. It defaults to \"anime\"\n- Sometimes, the user may describe the anime/manga instead. Therefore, you need to make your best guess to the anime/manga name.\n\nYou must extract the details and return them in the following JSON Format:\n{\n\"name_detected\": boolean [required]// your understanding as to if a specific name has been seen in the user's request. false if no specific name was mentioned.\n\"is_guess\": boolean [required] // if you guessed the anime name based on the description provided by the user.\n\"target\": string [required] // Based on the user's request, is it asking for \"manga\" or \"anime\"? Default to \"anime\"\n\"name\" : string [required] // best guess as to the name the user is referring to\n\"type\": string [required] // based on the request, match it to the values found in the tool getTypeList: If nothing is found and the \"target\" is \"anime\", use, \"tv\"; else, if the \"target\" is \"manga\", use \"manga\".\n}\n\nIf you do not understand the user's request ask the user again, politely. However, return the following response:\n{\nerror: true // boolean\n}"},{"role":"user","content":"Message: {{userMessage}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.9,"topP":0.9,"frequencyPenalty":0,"presencePenalty":0},"functions":[{"name":"getTypeList","description":"A list of valid string types. Use to fill in the \"type\" property","parameters":"{\n  \"type\": \"object\",\n  \"properties\": {}\n}"}]},{"functionName":"formatQuote","description":"Format quote queries","arguments":["content"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are an expert in organizing information.\nYou are to read the content that is passed to you then return it to markdown format. \n\nFormat:\n# {anime in {{content}}}\\n\n## {character in {{content}}}\\n\n{quote in {{content}}}\\n"},{"role":"user","content":"{{content}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0,"topP":0,"frequencyPenalty":0,"presencePenalty":0},"functions":[]}]}