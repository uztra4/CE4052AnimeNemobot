{"thirdPartyDependencies":[],"code":"/** Handle the user message.\n * @param {string} payload the message sent by user\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\n// CONSTANTS\nconst defaultState = {\n  \"currentReq\": null, // current user's request\n  \"isTrendingAnimeRequested\":false, //if trending anime is requested\n  \"isTrendingMangaRequested\":false, //if trending anime is requested\n  \"isGenreRequested\":false, //if genre is asked\n  \"genreReq\":null, //store the preferred genre\n  \"quoteReq\": null, //store what kind of quote request they want\n}\n\nconst genreList = [\n    \"anything\",\n    \"Comedy\",\n    \"Romance\",\n    \"Fantasy\",\n    \"Action\",\n    \"Drama\",\n    \"School Life\",\n    \"Adventure\",\n    \"Slice of Life\",\n    \"Yaoi\",\n    \"Science Fiction\",\n    \"Shoujo Ai\",\n    \"Ecchi\",\n    \"Sports\",\n    \"Historical\",\n    \"Music\",\n    \"Magic\",\n    \"Mystery\",\n    \"Supernatural\",\n    \"Harem\",\n    \"Japan\",\n    \"Psychological\",\n    \"Thriller\",\n    \"Shounen\",\n    \"Earth\",\n    \"Horror\",\n    \"Kids\",\n    \"Seinen\",\n    \"Present\",\n    \"Shounen Ai\",\n    \"Martial Arts\",\n    \"Asia\",\n    \"Shoujo\",\n    \"Isekai\",\n    \"Mecha\",\n    \"Demon\",\n    \"Super Power\",\n    \"Fantasy World\",\n    \"Violence\",\n    \"Military\",\n    \"Josei\"\n];\n// anything that prompts that the bot is going the right direction\n// can just declare as positive.includes(response)\nconst positive = [\"ok\", \"sure\", \"correct\", \"fine\", \"yes\"];\n\nconst reqList = `\n- Providing trending anime or manga based on genre, rating etc. \n- Searching information about an anime/manga\n- Getting a random anime quote\n- Identifying an anime from an image\n`\n\nasync function run(payload, state, tools) {  \n  // console.log(\"In Run: \", state)\n  try{\n    if(!state.currentReq){\n    res = await tools.understandUserReq({userMessage: payload});\n    // console.log(res);\n    state.currentReq = JSON.parse(res);\n  }\n\n  console.log(\"In run, request detected: \", state.currentReq);\n\n  switch (state.currentReq.req_num) {\n    case 1:\n      handleTrending(payload, state, tools);\n      break;\n    case 2:\n      handleSearch(payload, state, tools);\n      break;\n    case 3:\n      handleGetQuote(payload, state, tools);\n      break;\n    case 4:\n      handleIdentifyImage(payload, state, tools);\n      break;\n    default:\n      handleError(state, tools);\n  }    \n  }catch(e){\n    console.log(e);\n    handleError(state, tools);\n  }  \n}\n\n/** Startup.\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n*/\nasync function startup(state, tools) {\n  tools.reply(`Hello! Welcome to the Anime Query Bot. Here are some\n  information I can provide you!\n  ${reqList}`);\n\n  // Setting state\n  resetState(state);  \n}\n\n/** Unit test.\n * @param {Test} test define a test case\n * @param {Tool} tools available tools to perform a task\n */\nfunction unitTest(test, tools) {\n  test(\"Test 1\", 1, async (expect) => {\n    expect(true).toBeTrue();\n  });\n}\n\nasync function handleError(state, tools){\n  tools.reply(`I'm sorry, I do not understand your request. Here is a list of topics I can assist you in:\n  ${reqList}`);\n\n  resetState(state);\n}\n\nfunction resetState(state){\n  for (let key in defaultState) {\n   state[key] = defaultState[key];\n  }\n  console.log(\"Reset done.\", state);\n}\n\n\n// HANDLE TRENDING\nasync function handleTrending(payload, state, tools){\n  console.log(\"In handletrending; \", state);\n  var { isTrendingAnimeRequested, isTrendingMangaRequested, isGenreRequested, genreReq } = state;\n\n  // get user's response, convert to lower case\n  var response = payload.toLowerCase().trim();\n\n  if (!isTrendingAnimeRequested && !isTrendingMangaRequested){\n    var request = await tools.getUserWants({userMessage: response}, {memory: tools.getChatHistory(10)})\n    // if satisfy one of the functions\n    // this is done so that the chat bot wont reply \"trending anime\" / \"trending manga\"\n    if (request === \"trending anime\"){\n      tools.reply(`We detected that you want to get ${request}. Is that correct?`);\n      state.isTrendingAnimeRequested = true;\n    } else if (request === \"trending manga\"){\n      tools.reply(`We detected that you want to get ${request}. Is that correct?`);\n      state.isTrendingMangaRequested = true;\n    } else {\n      tools.reply(request);\n    }\n    \n  }\n\n  // ask for genre\n  if ((isTrendingAnimeRequested || isTrendingMangaRequested) && !isGenreRequested){\n    const genre = await tools.getGenre({userMessage: response}, {memory: tools.getChatHistory(5)});\n    if (genreList.includes(genre) || positive.includes(response)) {\n      state.genreReq = genre;\n      // if got preference\n      if (genreReq === `` || genreReq === null){\n        tools.reply(genre);\n      } else if (state.genreReq !== `anything`){\n        tools.reply(`We detected that the genre you want is ${state.genreReq}. Is that correct?`);\n        state.isGenreRequested = true;\n      } else {\n        tools.reply(`We will provide trending anime/manga for all genres. Is that ok?`);\n        state.isGenreRequested = true;\n      }\n    } else if (response === \"no\"){\n      tools.reply(\"Please let us know what you want to query!\");\n      resetState(state);\n    } else {\n      tools.reply(genre);\n    }\n  }\n\n //////////////////////////////////////////////get trending anime/////////////////////////////////////////////////\n  if (isTrendingAnimeRequested && isGenreRequested) {\n    if (positive.includes(response)){\n      // get trending anime from api\n      getTrendingAnime = await getTrending(genreReq, isTrendingAnimeRequested, isTrendingMangaRequested);\n\n      // if no error detected, generate top 5 anime\n      if (!(getTrendingAnime.includes('Error'))){\n        // convert to Javascript object\n        const trendingAnime = JSON.parse(getTrendingAnime);\n        tools.reply(`Here are the top 5 anime that are trending for ${genreReq} right now!`);\n        for (let i = 0; i < 5; i++) {\n          const animeInfo = trendingAnime['data'][i]['attributes'];\n            top5Anime = `Title: ${animeInfo['titles']['en_jp']}\n            Image: ${(animeInfo['posterImage']['small'])}\\n \n            Sypnosis: ${(animeInfo['synopsis'])} \\n\n            Average Rating: ${animeInfo['averageRating']} \\n\n            Status: ${animeInfo['status']} \\n\n            No. of Episodes: ${animeInfo['episodeCount']}`;\n            tools.reply(await tools.formatMessage({content: top5Anime})); \n        }\n      }\n      // if error detected, return error message and try again\n      else {\n        tools.reply(getTrendingAnime)\n      }\n    }\n    // done generating trending anime\n    tools.reply('Let me know what more you want to query!')\n    resetState(state);\n  }\n //////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n //////////////////////////////////////////////get trending manga/////////////////////////////////////////////////\n  if (isTrendingMangaRequested && isGenreRequested) {\n    if (positive.includes(response)){\n      // get trending anime from api\n      getTrendingManga = await getTrending(genreReq, isTrendingAnimeRequested, isTrendingMangaRequested);\n      // if no error detected, generate top 5 anime\n      if (!(getTrendingManga.includes('Error'))){\n        // convert to Javascript object\n        const trendingManga = JSON.parse(getTrendingManga);\n        tools.reply(`Here are the top 5 manga that are trending for ${genreReq} right now!`);\n        for (let i = 0; i < 5; i++) {\n          const mangaInfo = trendingManga['data'][i]['attributes'];\n            top5Manga = `Title: ${mangaInfo['canonicalTitle']}\\n\n            Image: ${(mangaInfo['posterImage']['small'])}\\n\n            Sypnosis: ${(mangaInfo['synopsis'])} \\n\n            Average Rating: ${mangaInfo['averageRating']} \\n\n            Status: ${mangaInfo['status']} \\n\n            No. of Volumes: ${mangaInfo['volumeCount']}\\n\n            No. of Chapter: ${mangaInfo['chapterCount']}`;\n            tools.reply(await tools.formatMessage({content: top5Manga})); \n        }\n      }\n      // if error detected, return error message and try again\n      else {\n        tools.reply(getTrendingManga)\n      }\n    }\n    // done generating trending anime\n    tools.reply('Let me know what more you want to query!')\n    resetState(state);\n  }\n  async function getTrending(genreChoice, isTrendingAnimeRequested, isTrendingMangaRequested) {\n    if (isTrendingAnimeRequested){\n      var apiURL = `https://kitsu.io/api/edge/anime?`;\n    }\n    else if (isTrendingMangaRequested){\n      var apiURL = `https://kitsu.io/api/edge/manga?`;\n    }\n    if (genreChoice !==  \"null\"){\n      apiURL = apiURL + `filter[categories]=${genreChoice}`;\n    }\n    try {\n      const trending = await fetch(apiURL, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/vnd.api+json',\n        },\n      });\n      const trendingText = await trending.text();\n      console.log(trendingText)\n      return trendingText;\n    } catch (error) {\n      const errorMsg = `Error fetching trending manga/anime: ${error}`;\n      console.error(errorMsg);\n      return errorMsg;\n    }\n  }\n //////////////////////////////////////////////////////////////////////////////////////////////////////////  \n}\n\n\n// HANDLE SEARCH\nasync function handleSearch(payload, state, tools){\n  resetState(state);\n  return;\n}\n\nasync function handleGetQuote(payload, state, tools) {\n  console.log(\"In handleGetQuote; \", state);\n  const quoteReq = await tools.quoteReq({userMessage: payload}, {memory: tools.getChatHistory(5)});\n  console.log(quoteReq);\n  try {\n    const quotes = await getQuote(quoteReq);\n    console.log(JSON.parse(quotes)[\"error\"]);\n    if (JSON.parse(quotes)[\"error\"] === \"No related quotes found!\"){\n      tools.reply(\"No related quotes found!\");\n    }else{\n      tools.reply(\"Generating quote...\");\n      tools.reply(await tools.formatMessage({content: quotes})); // Reply with the quotes\n      resetState(state);\n    }\n  } catch (error){\n    tools.reply(quoteReq);\n  }\n\n  async function getQuote(quoteReq) {\n    quoteReqJson = JSON.parse(quoteReq)\n    console.log(quoteReqJson['returnType']);\n    var apiURL = `https://animechan.xyz/api/random/`;\n    switch(quoteReqJson['returnType']) {\n      case \"random\":\n        apiURLSearch = `https://animechan.xyz/api/random`;\n        break;\n      case \"anime\":\n        apiURLSearch = apiURL + `anime?title=` + quoteReqJson[\"en\"];\n        break;\n      case \"character\":\n        apiURLSearch = apiURL + `character?name=` + quoteReqJson[\"character\"];\n        break;\n    }\n    console.log(apiURLSearch);\n    try {\n      var response = await fetch(apiURLSearch);\n      // Check if the response status is ok\n      if (!response.ok) {\n        if (quoteReqJson['returnType'] === \"anime\"){\n          apiURLSearch = apiURL + `anime?title=` + quoteReqJson[\"en_jp\"];\n          response = await fetch(apiURLSearch);\n          console.log(apiURL);\n          console.log(response);\n        }\n      }\n      // Parse the response as JSON\n      const data = await response.json();\n      // Handle the JSON data\n      console.log('Data:', data);\n      console.log(JSON.stringify(data));\n      // Construct quotesData\n      return JSON.stringify(data);\n    } catch (error) {\n      // Handle errors\n      console.error('Error fetching data:', error);\n      // Return error message\n      return \"No related quotes found!\";\n    }\n  }\n}\n\n// HANDLE IMAGE ID\nasync function handleIdentifyImage(payload, state, tools){\n  return;\n}\n","llmFunctions":[{"functionName":"getUserWants","description":"Get what the user wants.","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are a bot about anime and manga.\nYour job is to ask what does the user wants to query.\nIf the user wants trending anime, return only the string \"trending anime\".\nIf the user wants trending manga, return only the string \"trending manga\".\nDO NOT GENERATE THE TRENDING ANIME AND MANGA FOR THEM.\nIf its unclear, ask the user."},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.5,"topP":0.4,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"formatMessage","description":"Formatting messages in an organized markdown format","arguments":["content"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"RULES: \nYou need to keep your message up to 4096 Tokens. Therefore, you must try your best in summarizing the information.\n\nYou are an expert in organizing information.\nYou are to read the content that is passed to you and detect which case it fulfils. Then return it to markdown format. \n\nThere are 2 cases for formatting: anime/manga information and quotes. For each case, follow the instructions to respond to the request.\n\nMake sure that the information are displayed in the format below according to the case.\n\nCase 1: Anime and manga information, content typically contains synopsis, some may even contain images which are found in property \"images\" or \"Image\". You must refer and display the image.\nSome content passed to you may contain a trailer link. Add this link to the bottom of the displayed information. \nPlease rephrase or summarize only the {synopsis} that is provided in the content. Then display the information in the content as the format below. Make sure that you can display the content in 4096 tokens.\n\nFormat for Case 1:\n# {title in {{content}}}\\n\n{IMAGE picture if it is given in the {{content}}}\n## Synopsis\\n\n{Synopsis in {{content}}}\nAll other relevant information\nTrailer\n\nExample format for Case 1: \n# {title in {{content}}}\\n\n{IMAGE picture if it is given in the {{content}}}\n## Synopsis\\n\n{Synopsis in {{content}}}\n**Average Rating**: {Average Rating in {{content}}}\\n\n**Status**: {Status in {{content}}}\\n\n**No. of Episodes**: {episodeCount in {{content}}}\\n\n## Trailer\n\nCase 2: Quote content, content typically contains anime name, character and quote.\nFormat for Case 2: \n# {anime in {{content}}}\\n\n## {character in {{content}}}\\n\n{quote in {{content}}}\\n"},{"role":"user","content":"{{content}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0,"topP":0,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"getGenre","description":"To get what genre the use wants","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are to detect what genre the user wants for anime or manga.\nYou do so by FIRST asking what genre the user wants.\nDO NOT ASSUME THAT THE USER DONT MIND ANYTHING. ASK FIRST.\nIf it is unclear or if the user did not mention, CONTINUE asking for the genre preferred.\nIf the user does not have any preference or says anything, return only this string \"anything\".\nElse return only one genre that fit what the user wants in the genre list.\nDO NOT RECOMMEND ANY MANGA OR ANIME TO THE USERS. YOUR JOB IS ONLY TO RETURN THE DESIRED GENRE THE USER WANTS.\ngenre list= [\n      \"Comedy\",\n      \"Romance\",\n      \"Fantasy\",\n      \"Action\",\n      \"Drama\",\n      \"School Life\",\n      \"Adventure\",\n      \"Slice of Life\",\n      \"Yaoi\",\n      \"Science Fiction\",\n      \"Shoujo Ai\",\n      \"Ecchi\",\n      \"Sports\",\n      \"Historical\",\n      \"Music\",\n      \"Magic\",\n      \"Mystery\",\n      \"Supernatural\",\n      \"Harem\",\n      \"Japan\",\n      \"Psychological\",\n      \"Thriller\",\n      \"Shounen\",\n      \"Earth\",\n      \"Horror\",\n      \"Kids\",\n      \"Seinen\",\n      \"Present\",\n      \"Shounen Ai\",\n      \"Martial Arts\",\n      \"Asia\",\n      \"Shoujo\",\n      \"Isekai\",\n      \"Mecha\",\n      \"Demon\",\n      \"Super Power\",\n      \"Fantasy World\",\n      \"Violence\",\n      \"Military\",\n      \"Josei\"\n  ]\n\nIf the user responds \"yes\", ask what genre the user wants."},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.5,"topP":0.4,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"understandUserReq","description":"Discern what the user is requesting based on the available functions of the bot","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"user","content":"{{userMessage}}"},{"role":"system","content":"You are a helpful assistant and an expert in understanding user requests.\nYou need to read the user's request very carefully, and think through what it is asking.\n\nYou need to match the request based on the following mapping:\n1)\nname: get_trending\nDescription: User is requesting for the latest trending anime/manage\nexample: \"What is the latest trending {anime/manga}?\"\n\n2)\nname: search\nDescription: User is asking information related to an anime/manga\nexample: \"What is {anime_name} about?\"; \"Tell me more about {anime_name}\"; Or the user can simply type the name of the topic as such \"{anime_name}\"\n\n3)\nname: get_quote\nDescription:  User is requesting for an anime quote\nexample: \"Give me a random anime quote\"\n\n4)\nname: image_identify\nDescription: user is requesting to identify an anime/manga from an image source\nexample: \"What is this anime from the following image: {image_url}?\"\n\nReturn your answer in a JSON format:\n{\n    \"req_num\": number// number of the request based on the mapping\n    \"req_name\": string // name of the request. wrap it in \"\"\n    \"thought\": string // your thought process behind why you chose this\n}\n\nIf you are unable to identify the request. Return:\n\n{\n    \"req_num\": 999\n    \"req_name\": \"error\"// name of the request\n    \"thought\": string // your thought process behind why this is so\n}\n"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.1,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"quoteReq","description":"Detect what quote request type the user wants.","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"user","content":"{{userMessage}}"},{"role":"system","content":"You are an anime bot. You are expert in anime or anime characters.\nYour job is to detect the type of quote request the user wants.\n\nThere are 3 cases of quote requests. They can ask to generate a quote from an anime, generate a quote from an anime character or generate a random quote.\n\nDetermine which case it satisfies. For each case, follow the instructions to respond to the request.\n\nCase 1: An anime title is detected. User wants a quote from an anime.\nExamples that satisfy Case 1: \"quotes from {anime}\"\nActions for Case 1: Define en as the anime name in English and en_jp as the anime name in Romanization Japanese. Define returnType as \"anime\". Define character as null.\n\nCase 2: An anime character is detected. User wants quote from a specific anime character.\nExamples that satisfy Case 2: \"quotes from {anime character}\"\nActions for Case 2: Search for the anime name, note that the name typed\nmay have typo errors or not in full form, but try to identify the anime title. Define en as the anime name in English and en_jp as the anime name in Romaji Translation. Define returnType as \"character\". Define character as the Romaji Translation of the character's name.\n\nCase 3: User wants a random quote.\nExamples that satisfy Case 3: \"generate a random quote\", \"quote\", \"give me a quote.\"\nActions for Case 3: Define returnType as \"random\" and define en, en_jp and character as null.\n\nReturn in this JSON format:\n{\nreturnType: //\"random\", \"anime\" or \"character\"\nen: //anime title in English\nen_jp: //anime title in Japanese Romanization\ncharacter: //character from the anime stated in userMessage if available.\n}\n\n5. If you think it satisfy none of the cases, do not assume, prompt the user for more information.\n\n"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"genreExtractor","description":"Extract out the valid genre from the user's request","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"user","content":"Message: {{userMessage}}\nGenres: {{genres}}\ngenre_ids: {{genre_ids}}\nstatus: {{status}}"},{"role":"system","content":"You are a helpful assistant and an expert in identifying valid genres. You should only extract the genre from the user's message. Do not guess the genre.\n\nYou should return your answer in the following JSON Format:\n{\ngenres: list of strings // all valid genres\n}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.9,"topP":0.3,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"statusExtractor","description":"Extracts a status from the user's message.","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"user","content":"Message: {{userMessage}}\nGenres: {{genres}}\ngenre_ids: {{genre_ids}}\nstatus: {{status}}"},{"role":"system","content":"You are a helpful assistant and are extremely good at understanding the meaning of requests.\n\nIMPORTANT RULES YOU NEED TO FOLLOW:\nThe status you return can only take the values [\"upcoming\", \"complete\",  \"airing\", null] \n\nYour ONLY role is to read the user's request carefully, and see if there is any 'status'. \n\nA 'status' refers the current state of a manga or anime. It can take on the values of \"upcoming\", \"complete\", \"airing\" or null if there is no status that you can detect.\n\n\nThink about why you identified the status as such. \n\nExample of user's request: \"What anime is coming soon?\"\nStatus you should return: \"upcoming\"\nReason: The request is asking for anime that are \"coming soon\", this means that they are not yet released and thus, \"upcoming\".\n\nAnother example: \"What is XXX anime about?\"\nStatus you should return: null\nReason: The request is merely asking about XXX anime, you should not include a status in such a scenario\n\nReturn your response in the following JSON format:\n{\n\"status\": string // can be null if no status is detected.  The status you return can only take the values [\"upcoming\", \"complete\",  \"airing\", null] \n\"thought\": string // your thought process as to why you decided this.\n}\n\n\nIf no status is detected, return null."}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.9,"topP":0.3,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"searchHelper","description":"Helper to identify user's request regarding anime/manga","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"user","content":"Message: {{userMessage}}\nGenres: {{genres}}\ngenre_ids: {{genre_ids}}\nstatus: {{status}}"},{"role":"system","content":"You are a helpful assistant and an expert on all manga and anime.\n\nYour job is to read the user's request carefully and try to understand the anime or manga details from the request.\n\nYou also need to identify any other relevant details that the user is requesting. The following is a list of details you should look out for IN THE USER'S REQUEST:\n\n{\nname: name of the anime/manga from the message. If it is not explicitly mentioned, but the user has provided a description of the character, you can guess what anime he/she is referring to\ntype: refers to if it's a TV series, movie etc.\n}\n\nExamples of ways user may ask but not limited to the following:\n\"What is {name of anime/manga} about?\" or simply saying \"{name of anime/manga}\" or the user may even give you a description about the character, in which case, make your best guess as to the anime/manga.\n\nRules you NEED to follow:\n- For any property with [required], you must include that property in the response. Else, you can exclude it.\n- \"target\" should only be the following string values [\"anime\", \"manga\"]. It defaults to \"anime\"\n- Sometimes, the user may describe the anime/manga instead. Therefore, you need to make your best guess to the anime/manga name.\n\nYou must extract the details and return them in the following JSON Format:\n{\n\"name_detected\": boolean [required]// your understanding as to if a specific name has been seen in the user's request. false if no specific name was mentioned.\n\"is_guess\": boolean [required] // if you guessed the anime name based on the description provided by the user.\n\"target\": string [required] // Based on the user's request, is it asking for \"manga\" or \"anime\"? Default to \"anime\"\n\"name\" : string [required] // best guess as to the name the user is referring to\n\"type\": string [required] // based on the request, match it to the values found in the tool getTypeList: If nothing is found and the \"target\" is \"anime\", use, \"tv\"; else, if the \"target\" is \"manga\", use \"manga\".\n}\n\nIf you do not understand the user's request ask the user again, politely. However, return the following response:\n{\nerror: true // boolean\n}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.9,"topP":0.3,"frequencyPenalty":0,"presencePenalty":0},"functions":[{"name":"genreList","description":"A mapping of the genres and their respective mal_id. Use this to find the right id for the genre that the user is requesting","parameters":"{\n  \"type\": \"object\",\n  \"properties\": {}\n}"},{"name":"getTypeList","description":"A list of valid string types. Use to fill in the \"type\" property","parameters":"{\n  \"type\": \"object\",\n  \"properties\": {}\n}"}]}]}